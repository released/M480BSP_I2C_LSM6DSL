; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\kalman_filter.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\kalman_filter.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Kalman_Filter -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\kalman_filter.crf ..\Kalman_Filter\kalman_filter.c]
                          THUMB

                          AREA ||i.kalman_filter||, CODE, READONLY, ALIGN=2

                  kalman_filter PROC
;;;19     
;;;20     void kalman_filter(float angle_m, float gyro_m, float *angle_f, float *angle_dot_f)			
000000  4a36              LDR      r2,|L1.220|
;;;21     {
000002  b510              PUSH     {r4,lr}
;;;22     	angle += (gyro_m - q_bias) * dt;
000004  ed925a02          VLDR     s10,[r2,#8]
;;;23     
;;;24     	Pdot[0]  =Q_angle - P[0][1] - P[1][0];
000008  f102032c          ADD      r3,r2,#0x2c
00000c  edd23a00          VLDR     s7,[r2,#0]            ;22
000010  ee301ac5          VSUB.F32 s2,s1,s10             ;22
000014  ed9f2a32          VLDR     s4,|L1.224|
000018  edd32a01          VLDR     s5,[r3,#4]
00001c  ed9f4a31          VLDR     s8,|L1.228|
000020  ee413a02          VMLA.F32 s7,s2,s4              ;22
000024  ed933a02          VLDR     s6,[r3,#8]
000028  ee341a62          VSUB.F32 s2,s8,s5
00002c  4c2e              LDR      r4,|L1.232|
00002e  ee715a43          VSUB.F32 s11,s2,s6
000032  edc45a00          VSTR     s11,[r4,#0]
;;;25     	Pdot[1] = -P[1][1];
000036  edd34a03          VLDR     s9,[r3,#0xc]
00003a  eef11a64          VNEG.F32 s3,s9
00003e  edc41a01          VSTR     s3,[r4,#4]
;;;26     	Pdot[2] = -P[1][1];
000042  edc41a02          VSTR     s3,[r4,#8]
;;;27     	Pdot[3] = Q_gyro;
000046  ed844a03          VSTR     s8,[r4,#0xc]
;;;28     
;;;29     	P[0][0] += Pdot[0] * dt;
00004a  ed931a00          VLDR     s2,[r3,#0]
;;;30     	P[0][1] += Pdot[1] * dt;
00004e  ee412a82          VMLA.F32 s5,s3,s4
;;;31     	P[1][0] += Pdot[2] * dt;
000052  ee013a82          VMLA.F32 s6,s3,s4
000056  ee051a82          VMLA.F32 s2,s11,s4             ;29
;;;32     	P[1][1] += Pdot[3] * dt;
00005a  ee444a02          VMLA.F32 s9,s8,s4
;;;33     
;;;34     	angle_err = angle_m - angle;
00005e  ee302a63          VSUB.F32 s4,s0,s7
;;;35     
;;;36     	PCt_0=C_0 * P[0][0];
;;;37     	PCt_1=C_0 * P[1][0];
;;;38     
;;;39     	E = R_angle + C_0 * PCt_0;
000062  eeb60a00          VMOV.F32 s0,#0.50000000
000066  ed822a03          VSTR     s4,[r2,#0xc]          ;34
00006a  ee314a00          VADD.F32 s8,s2,s0
00006e  ed821a04          VSTR     s2,[r2,#0x10]         ;36
000072  ed823a05          VSTR     s6,[r2,#0x14]         ;37
000076  ed824a06          VSTR     s8,[r2,#0x18]
;;;40     
;;;41     	K_0 = PCt_0 / E;
00007a  eec11a04          VDIV.F32 s3,s2,s8
;;;42     	K_1 = PCt_1 / E;
00007e  ee830a04          VDIV.F32 s0,s6,s8
;;;43     
;;;44     	t_0 = PCt_0;
;;;45     	t_1 = C_0 * P[0][1];
000082  eeb04a41          VMOV.F32 s8,s2
000086  edc21a07          VSTR     s3,[r2,#0x1c]         ;41
;;;46     
;;;47     	P[0][0] -= K_0 * t_0;
00008a  ee014ac1          VMLS.F32 s8,s3,s2
;;;48     	P[0][1] -= K_0 * t_1;
;;;49     	P[1][0] -= K_1 * t_0;
;;;50     	P[1][1] -= K_1 * t_1;
;;;51     		
;;;52     	angle	+= K_0 * angle_err;
00008e  ee413a82          VMLA.F32 s7,s3,s4
000092  ed820a08          VSTR     s0,[r2,#0x20]         ;42
000096  ed821a09          VSTR     s2,[r2,#0x24]         ;44
00009a  edc22a0a          VSTR     s5,[r2,#0x28]         ;45
00009e  ed834a00          VSTR     s8,[r3,#0]            ;47
0000a2  eeb04a62          VMOV.F32 s8,s5                 ;47
0000a6  ee003a41          VMLS.F32 s6,s0,s2              ;49
0000aa  ee014ae2          VMLS.F32 s8,s3,s5              ;48
;;;53     	q_bias += K_1 * angle_err;
0000ae  ee005a02          VMLA.F32 s10,s0,s4
0000b2  ee404a62          VMLS.F32 s9,s0,s5              ;50
0000b6  ed834a01          VSTR     s8,[r3,#4]            ;48
0000ba  ed833a02          VSTR     s6,[r3,#8]            ;49
0000be  edc34a03          VSTR     s9,[r3,#0xc]          ;50
;;;54     	angle_dot = gyro_m - q_bias;
0000c2  ee300ac5          VSUB.F32 s0,s1,s10
0000c6  edc23a00          VSTR     s7,[r2,#0]            ;52
0000ca  ed825a02          VSTR     s10,[r2,#8]           ;53
0000ce  ed820a01          VSTR     s0,[r2,#4]
;;;55     
;;;56     	*angle_f = angle;
0000d2  edc03a00          VSTR     s7,[r0,#0]
;;;57     	*angle_dot_f = angle_dot;
0000d6  ed810a00          VSTR     s0,[r1,#0]
;;;58     }
0000da  bd10              POP      {r4,pc}
;;;59     /***********************************************************************/
                          ENDP

                  |L1.220|
                          DCD      ||.data||
                  |L1.224|
0000e0  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821
                  |L1.228|
0000e4  3b03126f          DCFS     0x3b03126f ; 0.0020000000949949026
                  |L1.232|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Pdot
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Q_angle
000000  3b03126f          DCFS     0x3b03126f ; 0.0020000000949949026

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.constdata||
                  Q_gyro
000000  3b03126f          DCFS     0x3b03126f ; 0.0020000000949949026

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.constdata||
                  R_angle
000000  3f000000          DCFS     0x3f000000 ; 0.5

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.constdata||
                  ||dt||
000000  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.constdata||
                  ||C_0||
000000  01                DCB      0x01

                          AREA ||.data||, DATA, ALIGN=2

                  angle
                          DCD      0x00000000
                  angle_dot
                          DCD      0x00000000
                  q_bias
                          DCD      0x00000000
                  angle_err
                          DCD      0x00000000
                  PCt_0
                          DCD      0x00000000
                  PCt_1
                          DCD      0x00000000
                  E
                          DCD      0x00000000
                  K_0
                          DCD      0x00000000
                  K_1
                          DCD      0x00000000
                  t_0
                          DCD      0x00000000
                  t_1
                          DCD      0x00000000
                  P
00002c  3f800000          DCFS     0x3f800000 ; 1
000030  00000000          DCFS     0x00000000 ; 0
000034  00000000          DCFS     0x00000000 ; 0
000038  3f800000          DCFS     0x3f800000 ; 1

;*** Start embedded assembler ***

#line 1 "..\\Kalman_Filter\\kalman_filter.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_kalman_filter_c_Q_angle____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_kalman_filter_c_Q_angle____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_kalman_filter_c_Q_angle____REVSH|
#line 402
|__asm___15_kalman_filter_c_Q_angle____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_kalman_filter_c_Q_angle____RRX|
#line 587
|__asm___15_kalman_filter_c_Q_angle____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
