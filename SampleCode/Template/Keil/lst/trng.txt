; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\trng.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\trng.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DENABLE_QSPI_MASTER --omf_browse=.\obj\trng.crf ..\..\..\Library\StdDriver\src\trng.c]
                          THUMB

                          AREA ||i.TRNG_GenBignum||, CODE, READONLY, ALIGN=2

                  TRNG_GenBignum PROC
;;;89       */
;;;90     int32_t TRNG_GenBignum(uint8_t u8BigNum[], int32_t i32Len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;91     {
;;;92         uint32_t   i, u32Reg, timeout;
;;;93     
;;;94         u32Reg = TRNG->CTL;
000004  4d12              LDR      r5,|L1.80|
000006  4680              MOV      r8,r0                 ;91
000008  6828              LDR      r0,[r5,#0]
;;;95     
;;;96         for (i = 0; i < i32Len/8; i++)
00000a  2400              MOVS     r4,#0
;;;97         {
;;;98             TRNG->CTL = TRNG_CTL_TRNGEN_Msk | u32Reg;
00000c  f0400701          ORR      r7,r0,#1
000010  17c8              ASRS     r0,r1,#31             ;96
;;;99     
;;;100            /* TRNG should generate one byte per 125*8 us */
;;;101            for (timeout = (CLK_GetHCLKFreq() / 100); timeout > 0; timeout--)
000012  f04f0964          MOV      r9,#0x64
000016  eb017650          ADD      r6,r1,r0,LSR #29      ;96
00001a  e010              B        |L1.62|
                  |L1.28|
00001c  602f              STR      r7,[r5,#0]            ;98
00001e  f7fffffe          BL       CLK_GetHCLKFreq
000022  fbb0f0f9          UDIV     r0,r0,r9
000026  b180              CBZ      r0,|L1.74|
                  |L1.40|
;;;102            {
;;;103                if (TRNG->CTL & TRNG_CTL_DVIF_Msk)
000028  6829              LDR      r1,[r5,#0]
00002a  0789              LSLS     r1,r1,#30
00002c  d402              BMI      |L1.52|
00002e  1e40              SUBS     r0,r0,#1
000030  d1fa              BNE      |L1.40|
000032  e00a              B        |L1.74|
                  |L1.52|
;;;104                    break;
;;;105            }
;;;106    
;;;107            if (timeout == 0)
000034  b148              CBZ      r0,|L1.74|
;;;108                return -1;
;;;109    
;;;110            u8BigNum[i] = (TRNG->DATA & 0xff);
000036  6868              LDR      r0,[r5,#4]
000038  f8080004          STRB     r0,[r8,r4]
00003c  1c64              ADDS     r4,r4,#1
                  |L1.62|
00003e  ebb40fe6          CMP      r4,r6,ASR #3          ;96
000042  d3eb              BCC      |L1.28|
;;;111        }
;;;112        return 0;
000044  2000              MOVS     r0,#0
                  |L1.70|
;;;113    }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L1.74|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;108
00004e  e7fa              B        |L1.70|
;;;114    
                          ENDP

                  |L1.80|
                          DCD      0x400b9000

                          AREA ||i.TRNG_GenBignumHex||, CODE, READONLY, ALIGN=2

                  TRNG_GenBignumHex PROC
;;;123      */
;;;124    int32_t TRNG_GenBignumHex(char cBigNumHex[], int32_t i32Len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;125    {
;;;126        uint32_t   i, idx, u32Reg, timeout;
;;;127        uint32_t   data;
;;;128    
;;;129        u32Reg = TRNG->CTL;
000004  4f1c              LDR      r7,|L2.120|
000006  4605              MOV      r5,r0                 ;125
000008  f8d79000          LDR      r9,[r7,#0]
;;;130        idx = 0;
00000c  2400              MOVS     r4,#0
;;;131        for (i = 0; i < i32Len/8; i++)
00000e  17c8              ASRS     r0,r1,#31
000010  4626              MOV      r6,r4
000012  eb017850          ADD      r8,r1,r0,LSR #29
000016  e028              B        |L2.106|
                  |L2.24|
;;;132        {
;;;133            TRNG->CTL = TRNG_CTL_TRNGEN_Msk | u32Reg;
000018  f0490001          ORR      r0,r9,#1
00001c  6038              STR      r0,[r7,#0]
;;;134    
;;;135            /* TRNG should generate one byte per 125*8 us */
;;;136            for (timeout = (CLK_GetHCLKFreq() / 100); timeout > 0; timeout--)
00001e  f7fffffe          BL       CLK_GetHCLKFreq
000022  2164              MOVS     r1,#0x64
000024  fbb0f0f1          UDIV     r0,r0,r1
000028  b170              CBZ      r0,|L2.72|
                  |L2.42|
;;;137            {
;;;138                if (TRNG->CTL & TRNG_CTL_DVIF_Msk)
00002a  6839              LDR      r1,[r7,#0]
00002c  0789              LSLS     r1,r1,#30
00002e  d402              BMI      |L2.54|
000030  1e40              SUBS     r0,r0,#1
000032  d1fa              BNE      |L2.42|
000034  e008              B        |L2.72|
                  |L2.54|
;;;139                    break;
;;;140            }
;;;141    
;;;142            if (timeout == 0)
000036  b138              CBZ      r0,|L2.72|
;;;143                return -1;
;;;144    
;;;145            data = (TRNG->DATA & 0xff);
000038  6878              LDR      r0,[r7,#4]
00003a  b2c0              UXTB     r0,r0
;;;146    
;;;147            if (data >= 0xA0)
00003c  28a0              CMP      r0,#0xa0
;;;148                cBigNumHex[idx++] = ((data >> 4) & 0xf) - 10 + 'A';
;;;149            else
;;;150                cBigNumHex[idx++] = ((data >> 4) & 0xf) + '0';
00003e  ea4f1110          LSR      r1,r0,#4
000042  d305              BCC      |L2.80|
000044  3137              ADDS     r1,r1,#0x37           ;147
000046  e004              B        |L2.82|
                  |L2.72|
000048  f04f30ff          MOV      r0,#0xffffffff        ;143
                  |L2.76|
;;;151    
;;;152            data &= 0xf;
;;;153            if (data >= 0xA)
;;;154                cBigNumHex[idx++] = data - 10 + 'A';
;;;155            else
;;;156                cBigNumHex[idx++] = data + '0';
;;;157        }
;;;158        cBigNumHex[idx] = 0;
;;;159        return 0;
;;;160    }
00004c  e8bd87f0          POP      {r4-r10,pc}
                  |L2.80|
000050  3130              ADDS     r1,r1,#0x30
                  |L2.82|
000052  5529              STRB     r1,[r5,r4]            ;150
000054  1c64              ADDS     r4,r4,#1              ;150
000056  f000000f          AND      r0,r0,#0xf            ;152
00005a  280a              CMP      r0,#0xa               ;153
00005c  d301              BCC      |L2.98|
00005e  3037              ADDS     r0,r0,#0x37           ;153
000060  e000              B        |L2.100|
                  |L2.98|
000062  3030              ADDS     r0,r0,#0x30           ;154
                  |L2.100|
000064  5528              STRB     r0,[r5,r4]            ;156
000066  1c64              ADDS     r4,r4,#1              ;156
000068  1c76              ADDS     r6,r6,#1              ;156
                  |L2.106|
00006a  ebb60fe8          CMP      r6,r8,ASR #3          ;131
00006e  d3d3              BCC      |L2.24|
000070  2000              MOVS     r0,#0                 ;158
000072  5528              STRB     r0,[r5,r4]            ;158
000074  e7ea              B        |L2.76|
;;;161    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      0x400b9000

                          AREA ||i.TRNG_GenWord||, CODE, READONLY, ALIGN=2

                  TRNG_GenWord PROC
;;;53       */
;;;54     int32_t TRNG_GenWord(uint32_t *u32RndNum)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;55     {
000004  4605              MOV      r5,r0
;;;56         uint32_t   i, u32Reg, timeout;
;;;57     
;;;58         *u32RndNum = 0;
;;;59         u32Reg = TRNG->CTL;
000006  4e13              LDR      r6,|L3.84|
000008  2000              MOVS     r0,#0                 ;58
00000a  6028              STR      r0,[r5,#0]
00000c  6830              LDR      r0,[r6,#0]
;;;60     
;;;61         for (i = 0; i < 4; i++)
00000e  2400              MOVS     r4,#0
;;;62         {
;;;63             TRNG->CTL = TRNG_CTL_TRNGEN_Msk | u32Reg;
000010  f0400701          ORR      r7,r0,#1
;;;64     
;;;65             /* TRNG should generate one byte per 125*8 us */
;;;66             for (timeout = (CLK_GetHCLKFreq() / 100); timeout > 0; timeout--)
000014  f04f0864          MOV      r8,#0x64
                  |L3.24|
000018  6037              STR      r7,[r6,#0]            ;63
00001a  f7fffffe          BL       CLK_GetHCLKFreq
00001e  fbb0f0f8          UDIV     r0,r0,r8
000022  b198              CBZ      r0,|L3.76|
                  |L3.36|
;;;67             {
;;;68                 if (TRNG->CTL & TRNG_CTL_DVIF_Msk)
000024  6831              LDR      r1,[r6,#0]
000026  0789              LSLS     r1,r1,#30
000028  d402              BMI      |L3.48|
00002a  1e40              SUBS     r0,r0,#1
00002c  d1fa              BNE      |L3.36|
00002e  e00d              B        |L3.76|
                  |L3.48|
;;;69                     break;
;;;70             }
;;;71     
;;;72             if (timeout == 0)
000030  b160              CBZ      r0,|L3.76|
;;;73                 return -1;
;;;74     
;;;75             *u32RndNum |= ((TRNG->DATA & 0xff) << i*8);
000032  6870              LDR      r0,[r6,#4]
000034  00e1              LSLS     r1,r4,#3
000036  b2c0              UXTB     r0,r0
000038  4088              LSLS     r0,r0,r1
00003a  6829              LDR      r1,[r5,#0]
00003c  1c64              ADDS     r4,r4,#1
00003e  4308              ORRS     r0,r0,r1
000040  6028              STR      r0,[r5,#0]            ;61
000042  2c04              CMP      r4,#4                 ;61
000044  d3e8              BCC      |L3.24|
;;;76     
;;;77         }
;;;78         return 0;
000046  2000              MOVS     r0,#0
                  |L3.72|
;;;79     }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L3.76|
00004c  f04f30ff          MOV      r0,#0xffffffff        ;73
000050  e7fa              B        |L3.72|
;;;80     
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      0x400b9000

                          AREA ||i.TRNG_Open||, CODE, READONLY, ALIGN=2

                  TRNG_Open PROC
;;;31       */
;;;32     void TRNG_Open(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;33     {
;;;34         SYS->IPRST1 |= SYS_IPRST1_TRNGRST_Msk;
000004  68c1              LDR      r1,[r0,#0xc]
000006  f0414100          ORR      r1,r1,#0x80000000
00000a  60c1              STR      r1,[r0,#0xc]
;;;35         SYS->IPRST1 ^= SYS_IPRST1_TRNGRST_Msk;
00000c  68c1              LDR      r1,[r0,#0xc]
00000e  f0814100          EOR      r1,r1,#0x80000000
000012  60c1              STR      r1,[r0,#0xc]
;;;36     
;;;37         TRNG->CTL |= TRNG_CTL_TRNGEN_Msk;
000014  4806              LDR      r0,|L4.48|
000016  6801              LDR      r1,[r0,#0]
000018  f0410101          ORR      r1,r1,#1
00001c  6001              STR      r1,[r0,#0]
;;;38     
;;;39         TRNG->ACT |= TRNG_ACT_ACT_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  f0410180          ORR      r1,r1,#0x80
000024  60c1              STR      r1,[r0,#0xc]
                  |L4.38|
;;;40     
;;;41         /* Waiting for ready */
;;;42         while ((TRNG->CTL & TRNG_CTL_READY_Msk) == 0);
000026  6801              LDR      r1,[r0,#0]
000028  0609              LSLS     r1,r1,#24
00002a  d5fc              BPL      |L4.38|
;;;43     }
00002c  4770              BX       lr
;;;44     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x400b9000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\trng.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_trng_c_47986f03____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_trng_c_47986f03____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_trng_c_47986f03____REVSH|
#line 402
|__asm___6_trng_c_47986f03____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_trng_c_47986f03____RRX|
#line 587
|__asm___6_trng_c_47986f03____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
