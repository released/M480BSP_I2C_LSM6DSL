; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_lsm6dsl.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_lsm6dsl.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Kalman_Filter -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\i2c_lsm6dsl.crf ..\I2C_LSM6DSL.c]
                          THUMB

                          AREA ||i.Accelerator_Calibration||, CODE, READONLY, ALIGN=2

                  Accelerator_Calibration PROC
;;;575    
;;;576    void Accelerator_Calibration(void)
000000  481b              LDR      r0,|L1.112|
;;;577    {
000002  b500              PUSH     {lr}
;;;578    	int32_t accX = 0;
;;;579    	int32_t accY = 0;
;;;580    	int32_t accZ = 0;		
;;;581    
;;;582    //	uint16_t integerX = 0;
;;;583    //	uint16_t integerY = 0;	
;;;584    //	uint16_t integerZ = 0;		
;;;585    	
;;;586    	if (Flag_Calibrate)
000004  7840              LDRB     r0,[r0,#1]  ; Flag_Calibrate
000006  2800              CMP      r0,#0                 ;577
000008  d030              BEQ      |L1.108|
;;;587    	{
;;;588    		appLSM6DSL_SetAccCalData(AXIS_X,0);	//reset calibration data
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       appLSM6DSL_SetAccCalData
;;;589    		accX = appLSM6DSL_GetAccData(AXIS_X);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       appLSM6DSL_GetAccData
;;;590    		if (MEMSABS(accX)>0)
000018  0041              LSLS     r1,r0,#1
00001a  d004              BEQ      |L1.38|
;;;591    		{
;;;592    			appLSM6DSL_SetAccCalData(AXIS_X,-accX);
00001c  4240              RSBS     r0,r0,#0
00001e  b201              SXTH     r1,r0
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       appLSM6DSL_SetAccCalData
                  |L1.38|
;;;593    
;;;594    		}
;;;595    
;;;596    		appLSM6DSL_SetAccCalData(AXIS_Y,0);		//reset calibration data
000026  2100              MOVS     r1,#0
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       appLSM6DSL_SetAccCalData
;;;597    		accY = appLSM6DSL_GetAccData(AXIS_Y);		
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       appLSM6DSL_GetAccData
;;;598    		if (MEMSABS(accY)>0)
000034  0041              LSLS     r1,r0,#1
000036  d004              BEQ      |L1.66|
;;;599    		{
;;;600    			appLSM6DSL_SetAccCalData(AXIS_Y,-accY);
000038  4240              RSBS     r0,r0,#0
00003a  b201              SXTH     r1,r0
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       appLSM6DSL_SetAccCalData
                  |L1.66|
;;;601    
;;;602    		}
;;;603    
;;;604    		appLSM6DSL_SetAccCalData(AXIS_Z,0);		//reset calibration data
000042  2100              MOVS     r1,#0
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       appLSM6DSL_SetAccCalData
;;;605    		accZ = appLSM6DSL_GetAccData(AXIS_Z);		
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       appLSM6DSL_GetAccData
;;;606    		if ((MEMSABS(accZ)>1000)||(MEMSABS(accZ)<=999))
000050  f5b07f7a          CMP      r0,#0x3e8
000054  d00a              BEQ      |L1.108|
000056  f5107f7a          CMN      r0,#0x3e8
00005a  d007              BEQ      |L1.108|
;;;607    		{
;;;608    			appLSM6DSL_SetAccCalData(AXIS_Z,-accZ+1000);
00005c  f5c0707a          RSB      r0,r0,#0x3e8
000060  b201              SXTH     r1,r0
000062  2002              MOVS     r0,#2
000064  f85deb04          POP      {lr}
000068  f7ffbffe          B.W      appLSM6DSL_SetAccCalData
                  |L1.108|
;;;609    
;;;610    		}
;;;611    		
;;;612    //		printf("%s : %4d,%4d,%4d\r\n",__FUNCTION__,accX,accY,accZ);
;;;613    	}
;;;614    }
00006c  bd00              POP      {pc}
;;;615    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      ||.data||

                          AREA ||i.Accelerator_filter||, CODE, READONLY, ALIGN=2

                  Accelerator_filter PROC
;;;615    
;;;616    void Accelerator_filter(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;617    {
;;;618    	#if defined (ENABLE_AVERAGE_FILTER)
;;;619    
;;;620    	uint8_t i;
;;;621    	int32_t ax_sum = 0, ay_sum = 0, az_sum = 0; 
000004  2500              MOVS     r5,#0
;;;622    
;;;623    	for(i = 1 ; i < FILTER_COUNT; i++)
;;;624    	{
;;;625    		ax_buf[i - 1] = ax_buf[i];
000006  f8df8088          LDR      r8,|L2.144|
00000a  462c              MOV      r4,r5                 ;621
;;;626    		ay_buf[i - 1] = ay_buf[i];
00000c  f1080620          ADD      r6,r8,#0x20
000010  462b              MOV      r3,r5                 ;621
000012  2001              MOVS     r0,#1                 ;623
;;;627    		az_buf[i - 1] = az_buf[i];
000014  f1060720          ADD      r7,r6,#0x20
                  |L2.24|
000018  eb080140          ADD      r1,r8,r0,LSL #1       ;625
00001c  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;625
000020  f8212c02          STRH     r2,[r1,#-2]           ;625
000024  eb060240          ADD      r2,r6,r0,LSL #1       ;626
000028  f8361010          LDRH     r1,[r6,r0,LSL #1]     ;626
00002c  f8221c02          STRH     r1,[r2,#-2]           ;626
000030  f8371010          LDRH     r1,[r7,r0,LSL #1]
000034  eb070240          ADD      r2,r7,r0,LSL #1
000038  1c40              ADDS     r0,r0,#1
00003a  b2c0              UXTB     r0,r0                 ;623
00003c  f8221c02          STRH     r1,[r2,#-2]
000040  2810              CMP      r0,#0x10              ;623
000042  d3e9              BCC      |L2.24|
;;;628    	}
;;;629    
;;;630    	ax_buf[FILTER_COUNT - 1] = appLSM6DSL_GetAccData(AXIS_X);
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       appLSM6DSL_GetAccData
00004a  f8a8001e          STRH     r0,[r8,#0x1e]
;;;631    	ay_buf[FILTER_COUNT - 1] = appLSM6DSL_GetAccData(AXIS_Y);
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       appLSM6DSL_GetAccData
000054  83f0              STRH     r0,[r6,#0x1e]
;;;632    	az_buf[FILTER_COUNT - 1] = appLSM6DSL_GetAccData(AXIS_Z);
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       appLSM6DSL_GetAccData
00005c  83f8              STRH     r0,[r7,#0x1e]
;;;633    
;;;634    	for(i = 0 ; i < FILTER_COUNT; i++)
00005e  2000              MOVS     r0,#0
000060  4641              MOV      r1,r8                 ;625
                  |L2.98|
;;;635    	{
;;;636    		ax_sum += ax_buf[i];
000062  f9312010          LDRSH    r2,[r1,r0,LSL #1]
000066  4415              ADD      r5,r5,r2
;;;637    		ay_sum += ay_buf[i];
000068  f9362010          LDRSH    r2,[r6,r0,LSL #1]
00006c  4414              ADD      r4,r4,r2
;;;638    		az_sum += az_buf[i];
00006e  f9372010          LDRSH    r2,[r7,r0,LSL #1]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0                 ;634
000076  4413              ADD      r3,r3,r2
000078  2810              CMP      r0,#0x10              ;634
00007a  d3f2              BCC      |L2.98|
;;;639    	}
;;;640    
;;;641    	ax = (int16_t)(ax_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
00007c  4805              LDR      r0,|L2.148|
00007e  1129              ASRS     r1,r5,#4
000080  8401              STRH     r1,[r0,#0x20]
;;;642    	ay = (int16_t)(ay_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
000082  1121              ASRS     r1,r4,#4
000084  8441              STRH     r1,[r0,#0x22]
;;;643    	az = (int16_t)(az_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
000086  1119              ASRS     r1,r3,#4
000088  8481              STRH     r1,[r0,#0x24]
;;;644    
;;;645    	#else
;;;646    	ax = appLSM6DSL_GetAccData(AXIS_X);
;;;647    	ay = appLSM6DSL_GetAccData(AXIS_Y);
;;;648    	az = appLSM6DSL_GetAccData(AXIS_Z);
;;;649    
;;;650    	#endif
;;;651    	
;;;652    }
00008a  e8bd81f0          POP      {r4-r8,pc}
;;;653    
                          ENDP

00008e  0000              DCW      0x0000
                  |L2.144|
                          DCD      ||.bss||
                  |L2.148|
                          DCD      ||.data||

                          AREA ||i.Angle_Calculate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Angle_Calculate PROC
;;;690    
;;;691    void Angle_Calculate(void)
000000  b510              PUSH     {r4,lr}
;;;692    {  
000002  ed2d8b06          VPUSH    {d8-d10}
;;;693    	float s1 = 0;
;;;694    	float s2 = 0;	
;;;695    
;;;696    	Accelerator_filter();
000006  f7fffffe          BL       Accelerator_filter
;;;697    	Gyroscope_filter();
00000a  f7fffffe          BL       Gyroscope_filter
;;;698    
;;;699    	s1 = sqrt((float)((ay *ay )+(az *az )));
00000e  4c5c              LDR      r4,|L3.384|
000010  8c60              LDRH     r0,[r4,#0x22]  ; ay
000012  fb10f100          SMULBB   r1,r0,r0
000016  8ca0              LDRH     r0,[r4,#0x24]  ; az
000018  fb101000          SMLABB   r0,r0,r0,r1
00001c  ee000a10          VMOV     s0,r0
000020  eeb80ac0          VCVT.F32.S32 s0,s0
000024  ee100a10          VMOV     r0,s0
000028  f7fffffe          BL       __aeabi_f2d
00002c  ec410b10          VMOV     d0,r0,r1
000030  f7fffffe          BL       __hardfp_sqrt
000034  ec510b10          VMOV     r0,r1,d0
000038  f7fffffe          BL       __aeabi_d2f
00003c  ee080a10          VMOV     s16,r0
;;;700    	s2 = sqrt((float)((ax *ax )+(az *az )));
000040  8c20              LDRH     r0,[r4,#0x20]  ; ax
000042  fb10f100          SMULBB   r1,r0,r0
000046  8ca0              LDRH     r0,[r4,#0x24]  ; az
000048  fb101000          SMLABB   r0,r0,r0,r1
00004c  ee000a10          VMOV     s0,r0
000050  eeb80ac0          VCVT.F32.S32 s0,s0
000054  ee100a10          VMOV     r0,s0
000058  f7fffffe          BL       __aeabi_f2d
00005c  ec410b10          VMOV     d0,r0,r1
000060  f7fffffe          BL       __hardfp_sqrt
000064  ec510b10          VMOV     r0,r1,d0
000068  f7fffffe          BL       __aeabi_d2f
00006c  ee0a0a10          VMOV     s20,r0
;;;701    
;;;702    	PitchAng = atan(ax /s1)*180/PI;
000070  f9b40020          LDRSH    r0,[r4,#0x20]  ; ax
000074  ee000a10          VMOV     s0,r0
000078  eef80ac0          VCVT.F32.S32 s1,s0
00007c  ee800a88          VDIV.F32 s0,s1,s16
000080  ee100a10          VMOV     r0,s0
000084  f7fffffe          BL       __aeabi_f2d
000088  ec410b10          VMOV     d0,r0,r1
00008c  f7fffffe          BL       __hardfp_atan
000090  ed9f8b3c          VLDR     d8,|L3.388|
000094  ec510b10          VMOV     r0,r1,d0
000098  ec532b18          VMOV     r2,r3,d8
00009c  f7fffffe          BL       __aeabi_dmul
0000a0  ed9f9b3a          VLDR     d9,|L3.396|
0000a4  ec532b19          VMOV     r2,r3,d9
0000a8  f7fffffe          BL       __aeabi_ddiv
0000ac  f7fffffe          BL       __aeabi_d2f
;;;703    	RollAng = atan(ay /s2)*180/PI;
0000b0  62e0              STR      r0,[r4,#0x2c]  ; PitchAng
0000b2  f9b40022          LDRSH    r0,[r4,#0x22]  ; ay
0000b6  ee000a10          VMOV     s0,r0
0000ba  eef80ac0          VCVT.F32.S32 s1,s0
0000be  ee800a8a          VDIV.F32 s0,s1,s20
0000c2  ee100a10          VMOV     r0,s0
0000c6  f7fffffe          BL       __aeabi_f2d
0000ca  ec410b10          VMOV     d0,r0,r1
0000ce  f7fffffe          BL       __hardfp_atan
0000d2  ec532b18          VMOV     r2,r3,d8
0000d6  ec510b10          VMOV     r0,r1,d0
0000da  f7fffffe          BL       __aeabi_dmul
0000de  ec532b19          VMOV     r2,r3,d9
0000e2  f7fffffe          BL       __aeabi_ddiv
0000e6  f7fffffe          BL       __aeabi_d2f
0000ea  ee000a10          VMOV     s0,r0
;;;704    
;;;705    //	PitchAng = atan(ax /s1)*57.295779;
;;;706    //	RollAng = atan(ay /s2)*57.295779;
;;;707    
;;;708    	#if defined (ENABLE_KALMAN_FILTER)
;;;709    	angle_dot = gx*GYRO_SCALE;	
;;;710    	kalman_filter(RollAng, angle_dot, &f_angle, &f_angle_dot);
0000ee  f1040138          ADD      r1,r4,#0x38
0000f2  ed840a0a          VSTR     s0,[r4,#0x28]         ;703
0000f6  f9b4001a          LDRSH    r0,[r4,#0x1a]         ;709  ; gx
0000fa  ee000a90          VMOV     s1,r0                 ;709
0000fe  1f08              SUBS     r0,r1,#4
000100  eef80ae0          VCVT.F32.S32 s1,s1                 ;709
000104  edc40a0c          VSTR     s1,[r4,#0x30]         ;709
000108  f7fffffe          BL       kalman_filter
;;;711    	#endif
;;;712    
;;;713    	#if 1	//debug
;;;714    
;;;715    	if (FlagSwitch)
00010c  7820              LDRB     r0,[r4,#0]  ; FlagSwitch
00010e  b190              CBZ      r0,|L3.310|
;;;716    	{
;;;717    		printf("Acc:%5d,%5d,%5d,",ax ,ay ,az );
000110  f9b43024          LDRSH    r3,[r4,#0x24]  ; az
000114  f9b42022          LDRSH    r2,[r4,#0x22]  ; ay
000118  f9b41020          LDRSH    r1,[r4,#0x20]  ; ax
00011c  a01d              ADR      r0,|L3.404|
00011e  f7fffffe          BL       __2printf
;;;718    		printf("Gyro:%5d,%5d,%5d,",gx ,gy ,gz );	
000122  f9b4301e          LDRSH    r3,[r4,#0x1e]  ; gz
000126  f9b4201c          LDRSH    r2,[r4,#0x1c]  ; gy
00012a  f9b4101a          LDRSH    r1,[r4,#0x1a]  ; gx
00012e  a01e              ADR      r0,|L3.424|
000130  f7fffffe          BL       __2printf
;;;719    		printf("\r\n");
000134  e01d              B        |L3.370|
                  |L3.310|
;;;720    	}
;;;721    	else
;;;722    	{		
;;;723    		printf("Pitch:%8.3lf,",PitchAng);
000136  6ae0              LDR      r0,[r4,#0x2c]  ; PitchAng
000138  f7fffffe          BL       __aeabi_f2d
00013c  ec410b10          VMOV     d0,r0,r1
000140  a01e              ADR      r0,|L3.444|
000142  ec532b10          VMOV     r2,r3,d0
000146  f7fffffe          BL       __2printf
;;;724    		printf("Roll:%8.3lf,",RollAng);
00014a  6aa0              LDR      r0,[r4,#0x28]  ; RollAng
00014c  f7fffffe          BL       __aeabi_f2d
000150  ec410b10          VMOV     d0,r0,r1
000154  a01d              ADR      r0,|L3.460|
000156  ec532b10          VMOV     r2,r3,d0
00015a  f7fffffe          BL       __2printf
;;;725    
;;;726    		#if defined (ENABLE_KALMAN_FILTER)
;;;727    		printf("Angle:%8.3lf,",f_angle);
00015e  6b60              LDR      r0,[r4,#0x34]  ; f_angle
000160  f7fffffe          BL       __aeabi_f2d
000164  ec410b10          VMOV     d0,r0,r1
000168  a01c              ADR      r0,|L3.476|
00016a  ec532b10          VMOV     r2,r3,d0
00016e  f7fffffe          BL       __2printf
                  |L3.370|
;;;728    		#endif
;;;729    		
;;;730    		printf("\r\n");
000172  ecbd8b06          VPOP     {d8-d10}
000176  a01d              ADR      r0,|L3.492|
000178  e8bd4010          POP      {r4,lr}
00017c  f7ffbffe          B.W      __2printf
;;;731    	}
;;;732    	
;;;733    	#endif
;;;734    }
;;;735    
                          ENDP

                  |L3.384|
                          DCD      ||.data||
                  |L3.388|
000184  00000000          DCFD     0x4066800000000000 ; 180
000188  40668000
                  |L3.396|
00018c  60000000          DCFD     0x400921fb60000000 ; 3.1415927410125732
000190  400921fb
                  |L3.404|
000194  4163633a          DCB      "Acc:%5d,%5d,%5d,",0
000198  2535642c
00019c  2535642c
0001a0  2535642c
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L3.424|
0001a8  4779726f          DCB      "Gyro:%5d,%5d,%5d,",0
0001ac  3a253564
0001b0  2c253564
0001b4  2c253564
0001b8  2c00    
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L3.444|
0001bc  50697463          DCB      "Pitch:%8.3lf,",0
0001c0  683a2538
0001c4  2e336c66
0001c8  2c00    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L3.460|
0001cc  526f6c6c          DCB      "Roll:%8.3lf,",0
0001d0  3a25382e
0001d4  336c662c
0001d8  00      
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
                  |L3.476|
0001dc  416e676c          DCB      "Angle:%8.3lf,",0
0001e0  653a2538
0001e4  2e336c66
0001e8  2c00    
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L3.492|
0001ec  0d0a00            DCB      "\r\n",0
0001ef  00                DCB      0

                          AREA ||i.Gyroscope_Calibration||, CODE, READONLY, ALIGN=2

                  Gyroscope_Calibration PROC
;;;540    
;;;541    void Gyroscope_Calibration(void)
000000  4812              LDR      r0,|L4.76|
;;;542    {
000002  b500              PUSH     {lr}
;;;543    	int32_t gyroX = 0;
;;;544    	int32_t gyroY = 0;
;;;545    	int32_t gyroZ = 0;		
;;;546    
;;;547    //	uint16_t integerX = 0;
;;;548    //	uint16_t integerY = 0;	
;;;549    //	uint16_t integerZ = 0;	
;;;550    	
;;;551    	if (Flag_Calibrate)
000004  7840              LDRB     r0,[r0,#1]  ; Flag_Calibrate
000006  2800              CMP      r0,#0                 ;542
000008  d01f              BEQ      |L4.74|
;;;552    	{
;;;553    		gyroX = appLSM6DSL_GetGyroData(AXIS_X);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       appLSM6DSL_GetGyroData
;;;554    		if (MEMSABS(gyroX)>0)
000010  0041              LSLS     r1,r0,#1
000012  d004              BEQ      |L4.30|
;;;555    		{
;;;556    			appLSM6DSL_SetGyroCalData(AXIS_X,-gyroX);
000014  4240              RSBS     r0,r0,#0
000016  b201              SXTH     r1,r0
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       appLSM6DSL_SetGyroCalData
                  |L4.30|
;;;557    
;;;558    		}
;;;559    		gyroY = appLSM6DSL_GetGyroData(AXIS_Y);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       appLSM6DSL_GetGyroData
;;;560    		if (MEMSABS(gyroY)>0)
000024  0041              LSLS     r1,r0,#1
000026  d004              BEQ      |L4.50|
;;;561    		{
;;;562    			appLSM6DSL_SetGyroCalData(AXIS_Y,-gyroY);
000028  4240              RSBS     r0,r0,#0
00002a  b201              SXTH     r1,r0
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       appLSM6DSL_SetGyroCalData
                  |L4.50|
;;;563    
;;;564    		}
;;;565    		gyroZ = appLSM6DSL_GetGyroData(AXIS_Z);
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       appLSM6DSL_GetGyroData
;;;566    		if (MEMSABS(gyroZ)>0)
000038  0041              LSLS     r1,r0,#1
00003a  d006              BEQ      |L4.74|
;;;567    		{
;;;568    			appLSM6DSL_SetGyroCalData(AXIS_Z,-gyroZ);
00003c  4240              RSBS     r0,r0,#0
00003e  b201              SXTH     r1,r0
000040  2002              MOVS     r0,#2
000042  f85deb04          POP      {lr}
000046  f7ffbffe          B.W      appLSM6DSL_SetGyroCalData
                  |L4.74|
;;;569    
;;;570    		}
;;;571    		
;;;572    //		printf("%s : %4d,%4d,%4d\r\n",__FUNCTION__,gyroX,gyroY,gyroZ);
;;;573    	}
;;;574    }
00004a  bd00              POP      {pc}
;;;575    
                          ENDP

                  |L4.76|
                          DCD      ||.data||

                          AREA ||i.Gyroscope_filter||, CODE, READONLY, ALIGN=2

                  Gyroscope_filter PROC
;;;653    
;;;654    void Gyroscope_filter(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;655    {
;;;656    	#if defined (ENABLE_AVERAGE_FILTER)	
;;;657    	uint8_t i;
;;;658    	int32_t gx_sum = 0, gy_sum = 0, gz_sum = 0; 
000004  2500              MOVS     r5,#0
;;;659    
;;;660    	for(i = 1 ; i < FILTER_COUNT; i++)
;;;661    	{
;;;662    		gx_buf[i - 1] = gx_buf[i];
000006  f8df8088          LDR      r8,|L5.144|
00000a  462c              MOV      r4,r5                 ;658
;;;663    		gy_buf[i - 1] = gy_buf[i];
00000c  f1080620          ADD      r6,r8,#0x20
000010  462b              MOV      r3,r5                 ;658
000012  2001              MOVS     r0,#1                 ;660
;;;664    		gz_buf[i - 1] = gz_buf[i];
000014  f1060720          ADD      r7,r6,#0x20
                  |L5.24|
000018  eb080140          ADD      r1,r8,r0,LSL #1       ;662
00001c  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;662
000020  f8212c02          STRH     r2,[r1,#-2]           ;662
000024  eb060240          ADD      r2,r6,r0,LSL #1       ;663
000028  f8361010          LDRH     r1,[r6,r0,LSL #1]     ;663
00002c  f8221c02          STRH     r1,[r2,#-2]           ;663
000030  f8371010          LDRH     r1,[r7,r0,LSL #1]
000034  eb070240          ADD      r2,r7,r0,LSL #1
000038  1c40              ADDS     r0,r0,#1
00003a  b2c0              UXTB     r0,r0                 ;660
00003c  f8221c02          STRH     r1,[r2,#-2]
000040  2810              CMP      r0,#0x10              ;660
000042  d3e9              BCC      |L5.24|
;;;665    	}
;;;666    
;;;667    	gx_buf[FILTER_COUNT - 1] = appLSM6DSL_GetGyroData(AXIS_X);
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       appLSM6DSL_GetGyroData
00004a  f8a8001e          STRH     r0,[r8,#0x1e]
;;;668    	gy_buf[FILTER_COUNT - 1] = appLSM6DSL_GetGyroData(AXIS_Y);
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       appLSM6DSL_GetGyroData
000054  83f0              STRH     r0,[r6,#0x1e]
;;;669    	gz_buf[FILTER_COUNT - 1] = appLSM6DSL_GetGyroData(AXIS_Z);
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       appLSM6DSL_GetGyroData
00005c  83f8              STRH     r0,[r7,#0x1e]
;;;670    
;;;671    	for(i = 0 ; i < FILTER_COUNT; i++)
00005e  2000              MOVS     r0,#0
000060  4641              MOV      r1,r8                 ;662
                  |L5.98|
;;;672    	{
;;;673    		gx_sum += gx_buf[i];
000062  f9312010          LDRSH    r2,[r1,r0,LSL #1]
000066  4415              ADD      r5,r5,r2
;;;674    		gy_sum += gy_buf[i];
000068  f9362010          LDRSH    r2,[r6,r0,LSL #1]
00006c  4414              ADD      r4,r4,r2
;;;675    		gz_sum += gz_buf[i];
00006e  f9372010          LDRSH    r2,[r7,r0,LSL #1]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0                 ;671
000076  4413              ADD      r3,r3,r2
000078  2810              CMP      r0,#0x10              ;671
00007a  d3f2              BCC      |L5.98|
;;;676    	}
;;;677    
;;;678    	gx = (int16_t)(gx_sum>>FILTER_FACTOR);// / FILTER_COUNT);
00007c  4805              LDR      r0,|L5.148|
00007e  1129              ASRS     r1,r5,#4
000080  8341              STRH     r1,[r0,#0x1a]
;;;679    	gy = (int16_t)(gy_sum>>FILTER_FACTOR);// / FILTER_COUNT);
000082  1121              ASRS     r1,r4,#4
000084  8381              STRH     r1,[r0,#0x1c]
;;;680    	gz = (int16_t)(gz_sum>>FILTER_FACTOR);// / FILTER_COUNT);
000086  1119              ASRS     r1,r3,#4
000088  83c1              STRH     r1,[r0,#0x1e]
;;;681    
;;;682    	#else
;;;683    	gx = appLSM6DSL_GetGyroData(AXIS_X);
;;;684    	gy = appLSM6DSL_GetGyroData(AXIS_Y);
;;;685    	gz = appLSM6DSL_GetGyroData(AXIS_Z);	
;;;686    
;;;687    	#endif
;;;688    	
;;;689    }
00008a  e8bd81f0          POP      {r4-r8,pc}
;;;690    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      ||.bss||+0x60
                  |L5.148|
                          DCD      ||.data||

                          AREA ||i.LSM6DSL_Delay||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Delay PROC
;;;41     
;;;42     void LSM6DSL_Delay(uint16_t nCount)
000000  e001              B        |L6.6|
                  |L6.2|
;;;43     {
;;;44         /* Decrement nCount value */
;;;45         while (nCount != 0)
;;;46         {
;;;47             nCount--;
000002  1e40              SUBS     r0,r0,#1
000004  b280              UXTH     r0,r0
                  |L6.6|
000006  2800              CMP      r0,#0                 ;45
000008  d1fb              BNE      |L6.2|
;;;48         }
;;;49     }
00000a  4770              BX       lr
;;;50     
                          ENDP


                          AREA ||i.appLSM6DSL_GetAcc||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetAcc PROC
;;;271    
;;;272    void appLSM6DSL_GetAcc(void)
000000  b530              PUSH     {r4,r5,lr}
;;;273    {
;;;274    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;275    	int16_t ax_s,ay_s,az_s;
;;;276    	uint8_t u8WaitCnt=0;
000002  2400              MOVS     r4,#0
000004  ed2d8b02          VPUSH    {d8}                  ;273
000008  b087              SUB      sp,sp,#0x1c           ;273
;;;277        float sensitivity = LSM6DSL_XL_FS_2G_SENSITIVITY;	//default
00000a  ed9f8a4b          VLDR     s16,|L7.312|
                  |L7.14|
;;;278    	
;;;279    	do{
;;;280    		appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_STATUS_REG, 1,&tmp);
00000e  466b              MOV      r3,sp
000010  2201              MOVS     r2,#1
000012  211e              MOVS     r1,#0x1e
000014  20d6              MOVS     r0,#0xd6
000016  f7fffffe          BL       appLSM6DSL_Read
;;;281    		if (u8WaitCnt++>30)
00001a  4620              MOV      r0,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  b2e4              UXTB     r4,r4
000020  281e              CMP      r0,#0x1e
000022  d803              BHI      |L7.44|
;;;282    			break;
;;;283    	}while(!(tmp&BIT(0)));
000024  f89d0000          LDRB     r0,[sp,#0]
000028  07c0              LSLS     r0,r0,#31
00002a  d0f0              BEQ      |L7.14|
                  |L7.44|
;;;284    
;;;285    	#if 1	//calculate linear acceleration in mg
;;;286    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&tmp);
00002c  466b              MOV      r3,sp
00002e  2201              MOVS     r2,#1
000030  2110              MOVS     r1,#0x10
000032  20d6              MOVS     r0,#0xd6
000034  f7fffffe          BL       appLSM6DSL_Read
;;;287        tmp &= LSM6DSL_XL_FS_MASK;
000038  f89d0000          LDRB     r0,[sp,#0]
00003c  f010000c          ANDS     r0,r0,#0xc
000040  f88d0000          STRB     r0,[sp,#0]
;;;288    //	printf("tmp(A) = 0x%2X\r\n",tmp);//debug
;;;289        switch(tmp)
000044  d00e              BEQ      |L7.100|
000046  2804              CMP      r0,#4
000048  d00a              BEQ      |L7.96|
00004a  2808              CMP      r0,#8
00004c  d002              BEQ      |L7.84|
00004e  280c              CMP      r0,#0xc
000050  d108              BNE      |L7.100|
000052  e002              B        |L7.90|
                  |L7.84|
;;;290        {
;;;291          case LSM6DSL_XL_FS_2G:
;;;292            sensitivity = LSM6DSL_XL_FS_2G_SENSITIVITY;
;;;293            break;
;;;294          case LSM6DSL_XL_FS_4G:
;;;295            sensitivity = LSM6DSL_XL_FS_4G_SENSITIVITY;
000054  ed9f8a39          VLDR     s16,|L7.316|
;;;296            break;
000058  e004              B        |L7.100|
                  |L7.90|
;;;297          case LSM6DSL_XL_FS_8G:
;;;298            sensitivity = LSM6DSL_XL_FS_8G_SENSITIVITY;
00005a  ed9f8a39          VLDR     s16,|L7.320|
;;;299            break;
00005e  e001              B        |L7.100|
                  |L7.96|
;;;300          case LSM6DSL_XL_FS_16G:
;;;301            sensitivity = LSM6DSL_XL_FS_16G_SENSITIVITY;
000060  ed9f8a38          VLDR     s16,|L7.324|
                  |L7.100|
;;;302            break;
;;;303        }
;;;304    	#endif	
;;;305    
;;;306    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_X_H_XL, 1, &tmpxh);
000064  ab06              ADD      r3,sp,#0x18
000066  2201              MOVS     r2,#1
000068  2129              MOVS     r1,#0x29
00006a  20d6              MOVS     r0,#0xd6
00006c  f7fffffe          BL       appLSM6DSL_Read
;;;307    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_X_L_XL, 1, &tmpxl);
000070  ab05              ADD      r3,sp,#0x14
000072  2201              MOVS     r2,#1
000074  2128              MOVS     r1,#0x28
000076  20d6              MOVS     r0,#0xd6
000078  f7fffffe          BL       appLSM6DSL_Read
;;;308    	ax_s = ((int16_t) ((tmpxh << 8) | tmpxl));
00007c  f89d0014          LDRB     r0,[sp,#0x14]
000080  f89d1018          LDRB     r1,[sp,#0x18]
;;;309    //	printf("ax_s:%2d,%2d,%2d |",ax_s,tmpxh,tmpxl);	//debug
;;;310    
;;;311    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Y_H_XL, 1, &tmpyh);
000084  ab04              ADD      r3,sp,#0x10
000086  ea402001          ORR      r0,r0,r1,LSL #8       ;308
00008a  b205              SXTH     r5,r0                 ;308
00008c  2201              MOVS     r2,#1
00008e  212b              MOVS     r1,#0x2b
000090  20d6              MOVS     r0,#0xd6
000092  f7fffffe          BL       appLSM6DSL_Read
;;;312    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Y_L_XL, 1, &tmpyl);
000096  ab03              ADD      r3,sp,#0xc
000098  2201              MOVS     r2,#1
00009a  212a              MOVS     r1,#0x2a
00009c  20d6              MOVS     r0,#0xd6
00009e  f7fffffe          BL       appLSM6DSL_Read
;;;313    	ay_s = ((int16_t) ((tmpyh << 8) | tmpyl));
0000a2  f89d000c          LDRB     r0,[sp,#0xc]
0000a6  f89d1010          LDRB     r1,[sp,#0x10]
;;;314    //	printf("ay_s:%2d,%2d,%2d |",ay_s,tmpyh,tmpyl);	//debug	
;;;315    
;;;316    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Z_H_XL, 1, &tmpzh);
0000aa  ab02              ADD      r3,sp,#8
0000ac  ea402001          ORR      r0,r0,r1,LSL #8       ;313
0000b0  b204              SXTH     r4,r0                 ;313
0000b2  2201              MOVS     r2,#1
0000b4  212d              MOVS     r1,#0x2d
0000b6  20d6              MOVS     r0,#0xd6
0000b8  f7fffffe          BL       appLSM6DSL_Read
;;;317    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Z_L_XL, 1, &tmpzl);
0000bc  ab01              ADD      r3,sp,#4
0000be  2201              MOVS     r2,#1
0000c0  212c              MOVS     r1,#0x2c
0000c2  20d6              MOVS     r0,#0xd6
0000c4  f7fffffe          BL       appLSM6DSL_Read
;;;318    	az_s = ((int16_t) ((tmpzh << 8) | tmpzl));
;;;319    //	printf("az_s:%2d,%2d,%2d\r\n",az_s,tmpzh,tmpzl);	//debug	
;;;320    
;;;321    	appLSM6DSL_SetAccData(AXIS_X,(int16_t)(ax_s*sensitivity));	
0000c8  ee005a10          VMOV     s0,r5
0000cc  f89d0004          LDRB     r0,[sp,#4]            ;318
0000d0  f89d1008          LDRB     r1,[sp,#8]            ;318
0000d4  eeb80ac0          VCVT.F32.S32 s0,s0
0000d8  ea402001          ORR      r0,r0,r1,LSL #8       ;318
0000dc  b203              SXTH     r3,r0                 ;318
0000de  ee200a08          VMUL.F32 s0,s0,s16
0000e2  eebd0ac0          VCVT.S32.F32 s0,s0
0000e6  ee100a10          VMOV     r0,s0
0000ea  b201              SXTH     r1,r0
0000ec  2000              MOVS     r0,#0
0000ee  f7fffffe          BL       appLSM6DSL_SetAccData
;;;322    	appLSM6DSL_SetAccData(AXIS_Y,(int16_t)(ay_s*sensitivity));	
0000f2  ee004a10          VMOV     s0,r4
0000f6  eeb80ac0          VCVT.F32.S32 s0,s0
0000fa  ee200a08          VMUL.F32 s0,s0,s16
0000fe  eebd0ac0          VCVT.S32.F32 s0,s0
000102  ee100a10          VMOV     r0,s0
000106  b201              SXTH     r1,r0
000108  2001              MOVS     r0,#1
00010a  f7fffffe          BL       appLSM6DSL_SetAccData
;;;323    	appLSM6DSL_SetAccData(AXIS_Z,(int16_t)(az_s*sensitivity));	
00010e  ee003a10          VMOV     s0,r3
000112  eeb80ac0          VCVT.F32.S32 s0,s0
000116  ee200a08          VMUL.F32 s0,s0,s16
00011a  eebd0ac0          VCVT.S32.F32 s0,s0
00011e  ee100a10          VMOV     r0,s0
000122  b201              SXTH     r1,r0
000124  2002              MOVS     r0,#2
000126  f7fffffe          BL       appLSM6DSL_SetAccData
;;;324    
;;;325    	LSM6DSL_Delay(5);
00012a  2005              MOVS     r0,#5
00012c  f7fffffe          BL       LSM6DSL_Delay
;;;326    }
000130  b007              ADD      sp,sp,#0x1c
000132  ecbd8b02          VPOP     {d8}
000136  bd30              POP      {r4,r5,pc}
;;;327    
                          ENDP

                  |L7.312|
000138  3d79db23          DCFS     0x3d79db23 ; 0.061000000685453415
                  |L7.316|
00013c  3df9db23          DCFS     0x3df9db23 ; 0.12200000137090683
                  |L7.320|
000140  3e79db23          DCFS     0x3e79db23 ; 0.24400000274181366
                  |L7.324|
000144  3ef9db23          DCFS     0x3ef9db23 ; 0.48800000548362732

                          AREA ||i.appLSM6DSL_GetAccData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetAccData PROC
;;;226    
;;;227    int16_t appLSM6DSL_GetAccData(AXIS_TypeDef axis)
000000  0001              MOVS     r1,r0
;;;228    {
;;;229    	int16_t data = 0;
;;;230    	
;;;231    	switch(axis)
;;;232    	{
;;;233    		case AXIS_X:
;;;234    			data = LSM6DSL_ACCx + cLSM6DSL_ACCx; 
000002  4a09              LDR      r2,|L8.40|
000004  f04f0000          MOV      r0,#0                 ;229
000008  d008              BEQ      |L8.28|
00000a  2901              CMP      r1,#1                 ;231
00000c  d009              BEQ      |L8.34|
00000e  2902              CMP      r1,#2                 ;231
000010  d103              BNE      |L8.26|
;;;235    			break;
;;;236    
;;;237    		case AXIS_Y:
;;;238    			data = LSM6DSL_ACCy + cLSM6DSL_ACCy; 
;;;239    			break;
;;;240    
;;;241    		case AXIS_Z:
;;;242    			data = LSM6DSL_ACCz + cLSM6DSL_ACCz; 
000012  8a50              LDRH     r0,[r2,#0x12]  ; LSM6DSL_ACCz
000014  88d1              LDRH     r1,[r2,#6]  ; cLSM6DSL_ACCz
                  |L8.22|
000016  4408              ADD      r0,r0,r1
000018  b200              SXTH     r0,r0
                  |L8.26|
;;;243    			break;				
;;;244    	}
;;;245    	
;;;246    	return data ;
;;;247    }
00001a  4770              BX       lr
                  |L8.28|
00001c  89d0              LDRH     r0,[r2,#0xe]          ;234  ; LSM6DSL_ACCx
00001e  8851              LDRH     r1,[r2,#2]            ;234  ; cLSM6DSL_ACCx
000020  e7f9              B        |L8.22|
                  |L8.34|
000022  8a10              LDRH     r0,[r2,#0x10]         ;238  ; LSM6DSL_ACCy
000024  8891              LDRH     r1,[r2,#4]            ;238  ; cLSM6DSL_ACCy
000026  e7f6              B        |L8.22|
;;;248    
                          ENDP

                  |L8.40|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_GetData||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  appLSM6DSL_GetData PROC
;;;518    
;;;519    void appLSM6DSL_GetData(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;520    {
;;;521    	appLSM6DSL_GetAcc();
000002  f7fffffe          BL       appLSM6DSL_GetAcc
;;;522    	appLSM6DSL_GetGyro();
000006  f7fffffe          BL       appLSM6DSL_GetGyro
;;;523    
;;;524    	#if 1	//debug
;;;525    	printf("ACC:%5d,%5d,%5d, GYRO:%5d,%5d,%5d\r\n",
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       appLSM6DSL_GetGyroData
000010  4607              MOV      r7,r0
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       appLSM6DSL_GetGyroData
000018  4606              MOV      r6,r0
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       appLSM6DSL_GetGyroData
000020  4605              MOV      r5,r0
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       appLSM6DSL_GetAccData
000028  4603              MOV      r3,r0
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       appLSM6DSL_GetAccData
000030  4604              MOV      r4,r0
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       appLSM6DSL_GetAccData
000038  e88d00e0          STM      sp,{r5-r7}
00003c  4601              MOV      r1,r0
00003e  4622              MOV      r2,r4
000040  a001              ADR      r0,|L9.72|
000042  f7fffffe          BL       __2printf
;;;526    				appLSM6DSL_GetAccData(AXIS_X),appLSM6DSL_GetAccData(AXIS_Y),appLSM6DSL_GetAccData(AXIS_Z),
;;;527    				appLSM6DSL_GetGyroData(AXIS_X),appLSM6DSL_GetGyroData(AXIS_Y),appLSM6DSL_GetGyroData(AXIS_Z));
;;;528    	#endif
;;;529    }	
000046  bdfe              POP      {r1-r7,pc}
;;;530    
                          ENDP

                  |L9.72|
000048  4143433a          DCB      "ACC:%5d,%5d,%5d, GYRO:%5d,%5d,%5d\r\n",0
00004c  2535642c
000050  2535642c
000054  2535642c
000058  20475952
00005c  4f3a2535
000060  642c2535
000064  642c2535
000068  640d0a00

                          AREA ||i.appLSM6DSL_GetGyro||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetGyro PROC
;;;327    
;;;328    void appLSM6DSL_GetGyro(void)
000000  b570              PUSH     {r4-r6,lr}
;;;329    {
;;;330    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;331    	int16_t gx_s,gy_s,gz_s;
;;;332    	uint8_t u8WaitCnt=0;
000002  2400              MOVS     r4,#0
000004  ed2d8b02          VPUSH    {d8}                  ;329
000008  b088              SUB      sp,sp,#0x20           ;329
;;;333        float sensitivity = LSM6DSL_G_FS_125_SENSITIVITY;	//default
00000a  ed9f8a53          VLDR     s16,|L10.344|
                  |L10.14|
;;;334        
;;;335    	do{
;;;336    		appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_STATUS_REG, 1,&tmp);
00000e  466b              MOV      r3,sp
000010  2201              MOVS     r2,#1
000012  211e              MOVS     r1,#0x1e
000014  20d6              MOVS     r0,#0xd6
000016  f7fffffe          BL       appLSM6DSL_Read
00001a  1c64              ADDS     r4,r4,#1
;;;337    		u8WaitCnt++;
00001c  b2e4              UXTB     r4,r4
;;;338    		if (u8WaitCnt>30)
00001e  2c1e              CMP      r4,#0x1e
000020  d803              BHI      |L10.42|
;;;339    			break;
;;;340    	}while(!(tmp&BIT(1)));
000022  f89d0000          LDRB     r0,[sp,#0]
000026  0780              LSLS     r0,r0,#30
000028  d5f1              BPL      |L10.14|
                  |L10.42|
;;;341    
;;;342    	#if 1	//calculate angular rate in mdps
;;;343    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&tmp);
00002a  466b              MOV      r3,sp
00002c  2201              MOVS     r2,#1
00002e  2111              MOVS     r1,#0x11
000030  20d6              MOVS     r0,#0xd6
000032  f7fffffe          BL       appLSM6DSL_Read
;;;344        tmp &= LSM6DSL_G_FS_MASK;
000036  f89d0000          LDRB     r0,[sp,#0]
00003a  f000000c          AND      r0,r0,#0xc
00003e  f88d0000          STRB     r0,[sp,#0]
;;;345    //	printf("tmp(G) = 0x%2X\r\n",tmp);//debug
;;;346        switch(tmp)
000042  2804              CMP      r0,#4
000044  d00a              BEQ      |L10.92|
000046  dc01              BGT      |L10.76|
000048  b980              CBNZ     r0,|L10.108|
00004a  e004              B        |L10.86|
                  |L10.76|
00004c  2808              CMP      r0,#8
00004e  d008              BEQ      |L10.98|
000050  280c              CMP      r0,#0xc
000052  d10b              BNE      |L10.108|
000054  e008              B        |L10.104|
                  |L10.86|
;;;347        {
;;;348          case LSM6DSL_G_FS_125:
;;;349            sensitivity = LSM6DSL_G_FS_125_SENSITIVITY;
;;;350            break;
;;;351          case LSM6DSL_G_FS_245:
;;;352            sensitivity = LSM6DSL_G_FS_245_SENSITIVITY;
000056  ed9f8a41          VLDR     s16,|L10.348|
;;;353            break;
00005a  e007              B        |L10.108|
                  |L10.92|
;;;354          case LSM6DSL_G_FS_500:
;;;355            sensitivity = LSM6DSL_G_FS_500_SENSITIVITY;
00005c  ed9f8a40          VLDR     s16,|L10.352|
;;;356            break;
000060  e004              B        |L10.108|
                  |L10.98|
;;;357          case LSM6DSL_G_FS_1000:
;;;358            sensitivity = LSM6DSL_G_FS_1000_SENSITIVITY;
000062  ed9f8a40          VLDR     s16,|L10.356|
;;;359            break;
000066  e001              B        |L10.108|
                  |L10.104|
;;;360          case LSM6DSL_G_FS_2000:
;;;361            sensitivity = LSM6DSL_G_FS_2000_SENSITIVITY;
000068  ed9f8a3f          VLDR     s16,|L10.360|
                  |L10.108|
;;;362            break;
;;;363        }
;;;364    	#endif	
;;;365    
;;;366    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_X_H_G, 1, &tmpxh);
00006c  ab02              ADD      r3,sp,#8
00006e  2201              MOVS     r2,#1
000070  2123              MOVS     r1,#0x23
000072  20d6              MOVS     r0,#0xd6
000074  f7fffffe          BL       appLSM6DSL_Read
;;;367    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_X_L_G, 1, &tmpxl);
000078  ab01              ADD      r3,sp,#4
00007a  2201              MOVS     r2,#1
00007c  2122              MOVS     r1,#0x22
00007e  20d6              MOVS     r0,#0xd6
000080  f7fffffe          BL       appLSM6DSL_Read
;;;368    	gx_s = (((int16_t)(tmpxh << 8)) | ((int16_t)tmpxl));
000084  f89d0008          LDRB     r0,[sp,#8]
;;;369    //	printf("gx_s:%4d,%4d,%4d |",gx_s,tmpxh,tmpxl);	//debug
;;;370    
;;;371    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Y_H_G, 1, &tmpyh);
000088  ab04              ADD      r3,sp,#0x10
00008a  0200              LSLS     r0,r0,#8              ;368
00008c  b206              SXTH     r6,r0                 ;368
00008e  f89d0004          LDRB     r0,[sp,#4]            ;368
000092  2201              MOVS     r2,#1
000094  4306              ORRS     r6,r6,r0              ;368
000096  2125              MOVS     r1,#0x25
000098  20d6              MOVS     r0,#0xd6
00009a  f7fffffe          BL       appLSM6DSL_Read
;;;372    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Y_L_G, 1, &tmpyl);
00009e  ab03              ADD      r3,sp,#0xc
0000a0  2201              MOVS     r2,#1
0000a2  2124              MOVS     r1,#0x24
0000a4  20d6              MOVS     r0,#0xd6
0000a6  f7fffffe          BL       appLSM6DSL_Read
;;;373    	gy_s = (((int16_t)(tmpyh << 8)) | ((int16_t)tmpyl));
0000aa  f89d0010          LDRB     r0,[sp,#0x10]
;;;374    //	printf("gy_s:%4d,%4d,%4d |",gy_s,tmpyh,tmpyl);	//debug
;;;375    
;;;376    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Z_H_G, 1, &tmpzh);
0000ae  ab06              ADD      r3,sp,#0x18
0000b0  0200              LSLS     r0,r0,#8              ;373
0000b2  b204              SXTH     r4,r0                 ;373
0000b4  f89d000c          LDRB     r0,[sp,#0xc]          ;373
0000b8  2201              MOVS     r2,#1
0000ba  4304              ORRS     r4,r4,r0              ;373
0000bc  2127              MOVS     r1,#0x27
0000be  20d6              MOVS     r0,#0xd6
0000c0  f7fffffe          BL       appLSM6DSL_Read
;;;377    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Z_L_G, 1, &tmpzl);
0000c4  ab05              ADD      r3,sp,#0x14
0000c6  2201              MOVS     r2,#1
0000c8  2126              MOVS     r1,#0x26
0000ca  20d6              MOVS     r0,#0xd6
0000cc  f7fffffe          BL       appLSM6DSL_Read
;;;378    	gz_s = (((int16_t)(tmpzh << 8)) | ((int16_t)tmpzl));
;;;379    //	printf("gz_s:%4d,%4d,%4d \r\n",gz_s,tmpzh,tmpzl);	//debug
;;;380    	
;;;381    	appLSM6DSL_SetGyroData(AXIS_X,(int16_t)(gx_s*sensitivity)/1000);	
0000d0  ee006a10          VMOV     s0,r6
0000d4  f89d0018          LDRB     r0,[sp,#0x18]         ;378
0000d8  f44f737a          MOV      r3,#0x3e8
0000dc  eeb80ac0          VCVT.F32.S32 s0,s0
0000e0  0200              LSLS     r0,r0,#8              ;378
0000e2  b205              SXTH     r5,r0                 ;378
0000e4  f89d0014          LDRB     r0,[sp,#0x14]         ;378
0000e8  ee200a08          VMUL.F32 s0,s0,s16
0000ec  4305              ORRS     r5,r5,r0              ;378
0000ee  eebd0ac0          VCVT.S32.F32 s0,s0
0000f2  ee100a10          VMOV     r0,s0
0000f6  b200              SXTH     r0,r0
0000f8  fb90f0f3          SDIV     r0,r0,r3
0000fc  b201              SXTH     r1,r0
0000fe  2000              MOVS     r0,#0
000100  f7fffffe          BL       appLSM6DSL_SetGyroData
;;;382    	appLSM6DSL_SetGyroData(AXIS_Y,(int16_t)(gy_s*sensitivity)/1000);	
000104  ee004a10          VMOV     s0,r4
000108  eeb80ac0          VCVT.F32.S32 s0,s0
00010c  ee200a08          VMUL.F32 s0,s0,s16
000110  eebd0ac0          VCVT.S32.F32 s0,s0
000114  ee100a10          VMOV     r0,s0
000118  b200              SXTH     r0,r0
00011a  fb90f0f3          SDIV     r0,r0,r3
00011e  b201              SXTH     r1,r0
000120  2001              MOVS     r0,#1
000122  f7fffffe          BL       appLSM6DSL_SetGyroData
;;;383    	appLSM6DSL_SetGyroData(AXIS_Z,(int16_t)(gz_s*sensitivity)/1000);
000126  ee005a10          VMOV     s0,r5
00012a  eeb80ac0          VCVT.F32.S32 s0,s0
00012e  ee200a08          VMUL.F32 s0,s0,s16
000132  eebd0ac0          VCVT.S32.F32 s0,s0
000136  ee100a10          VMOV     r0,s0
00013a  b200              SXTH     r0,r0
00013c  fb90f0f3          SDIV     r0,r0,r3
000140  b201              SXTH     r1,r0
000142  2002              MOVS     r0,#2
000144  f7fffffe          BL       appLSM6DSL_SetGyroData
;;;384    
;;;385    //	printf("Gyro : %4d,%4d,%4d\r\n",gx_s,gy_s,gz_s);
;;;386    
;;;387    	LSM6DSL_Delay(5);
000148  2005              MOVS     r0,#5
00014a  f7fffffe          BL       LSM6DSL_Delay
;;;388    }
00014e  b008              ADD      sp,sp,#0x20
000150  ecbd8b02          VPOP     {d8}
000154  bd70              POP      {r4-r6,pc}
;;;389    
                          ENDP

000156  0000              DCW      0x0000
                  |L10.344|
000158  408c0000          DCFS     0x408c0000 ; 4.375
                  |L10.348|
00015c  410c0000          DCFS     0x410c0000 ; 8.75
                  |L10.352|
000160  418c0000          DCFS     0x418c0000 ; 17.5
                  |L10.356|
000164  420c0000          DCFS     0x420c0000 ; 35
                  |L10.360|
000168  428c0000          DCFS     0x428c0000 ; 70

                          AREA ||i.appLSM6DSL_GetGyroData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetGyroData PROC
;;;248    
;;;249    int16_t appLSM6DSL_GetGyroData(AXIS_TypeDef axis)
000000  0001              MOVS     r1,r0
;;;250    {
;;;251    	int16_t data = 0;
;;;252    	
;;;253    	switch(axis)
;;;254    	{
;;;255    		case AXIS_X:
;;;256    			data = LSM6DSL_GYROx + cLSM6DSL_GYROx; 
000002  4a09              LDR      r2,|L11.40|
000004  f04f0000          MOV      r0,#0                 ;251
000008  d008              BEQ      |L11.28|
00000a  2901              CMP      r1,#1                 ;253
00000c  d009              BEQ      |L11.34|
00000e  2902              CMP      r1,#2                 ;253
000010  d103              BNE      |L11.26|
;;;257    			break;
;;;258    
;;;259    		case AXIS_Y:
;;;260    			data = LSM6DSL_GYROy + cLSM6DSL_GYROy; 
;;;261    			break;
;;;262    
;;;263    		case AXIS_Z:
;;;264    			data = LSM6DSL_GYROz + cLSM6DSL_GYROz; 
000012  8b10              LDRH     r0,[r2,#0x18]  ; LSM6DSL_GYROz
000014  8991              LDRH     r1,[r2,#0xc]  ; cLSM6DSL_GYROz
                  |L11.22|
000016  4408              ADD      r0,r0,r1
000018  b200              SXTH     r0,r0
                  |L11.26|
;;;265    			break;				
;;;266    	}
;;;267    	
;;;268    	return data ;
;;;269    }
00001a  4770              BX       lr
                  |L11.28|
00001c  8a90              LDRH     r0,[r2,#0x14]         ;256  ; LSM6DSL_GYROx
00001e  8911              LDRH     r1,[r2,#8]            ;256  ; cLSM6DSL_GYROx
000020  e7f9              B        |L11.22|
                  |L11.34|
000022  8ad0              LDRH     r0,[r2,#0x16]         ;260  ; LSM6DSL_GYROy
000024  8951              LDRH     r1,[r2,#0xa]          ;260  ; cLSM6DSL_GYROy
000026  e7f6              B        |L11.22|
;;;270    
                          ENDP

                  |L11.40|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_GetWhoAmI||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  appLSM6DSL_GetWhoAmI PROC
;;;531    
;;;532    void appLSM6DSL_GetWhoAmI(void)
000000  b508              PUSH     {r3,lr}
;;;533    {
;;;534    	uint8_t data;
;;;535    	
;;;536    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_WHO_AM_I_ADDR, 1, &data);	// value : 0x6A	
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DSL_Read
;;;537    	printf("WHO_AM_I : 0x%2X\r\n" , data);
00000e  f89d1000          LDRB     r1,[sp,#0]
000012  a002              ADR      r0,|L12.28|
000014  f7fffffe          BL       __2printf
;;;538    }	
000018  bd08              POP      {r3,pc}
;;;539    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
00001c  57484f5f          DCB      "WHO_AM_I : 0x%2X\r\n",0
000020  414d5f49
000024  203a2030
000028  78253258
00002c  0d0a00  
00002f  00                DCB      0

                          AREA ||i.appLSM6DSL_Read||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Read PROC
;;;50     
;;;51     void appLSM6DSL_Read(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b430              PUSH     {r4,r5}
;;;52                                   uint16_t NumByteToRead,
;;;53                                   uint8_t* pBuffer)
;;;54     {
000002  461c              MOV      r4,r3
;;;55     	#if defined (ENABLE_I2C_POLLING_DISCRETE)
;;;56     	uint8_t i, tmp;
;;;57     	I2C_T *i2c = I2C_SENSOR_PORT;
;;;58     	
;;;59     	I2C_START(i2c);                         			//Start
;;;60     	I2C_WAIT_READY(i2c);
;;;61     
;;;62     	I2C_SET_DATA(i2c, DeviceAddr | I2C_WR );             		//send slave address+W
;;;63     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;64     	I2C_WAIT_READY(i2c);
;;;65     
;;;66     	I2C_SET_DATA(i2c, RegisterAddr);             		//send index
;;;67     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;68     	I2C_WAIT_READY(i2c);
;;;69     
;;;70     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_STA_SI);		//Start
;;;71     	I2C_WAIT_READY(i2c);
;;;72     
;;;73     	I2C_SET_DATA(i2c, DeviceAddr | I2C_RD );    			//send slave address+R
;;;74     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;75     	I2C_WAIT_READY(i2c);
;;;76     
;;;77     	for (i=0; i<NumByteToRead; i++)
;;;78     	{
;;;79     		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;80     		I2C_WAIT_READY(i2c);
;;;81     		tmp = I2C_GET_DATA(i2c);           			//read data
;;;82     		pBuffer[i]=tmp;
;;;83     	}
;;;84     	I2C_STOP(i2c);									//Stop
;;;85     
;;;86     	#elif defined (ENABLE_I2C_POLLING_API)
;;;87     	
;;;88     	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;89     	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;90     //	uint8_t i = 0;
;;;91     	
;;;92     	I2C_ReadMultiBytesOneReg(I2C_SENSOR_PORT, u8SlaveAddr, RegisterAddr, pBuffer, NumByteToRead);	
;;;93     //	i = I2C_ReadByteOneReg(I2C_SENSOR_PORT, u8SlaveAddr, RegisterAddr);
;;;94     //	*pBuffer =  i;
;;;95     
;;;96     	#elif defined (ENABLE_I2C_IRQ)
;;;97     
;;;98     	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;99     	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;100    	
;;;101    	I2Cx_ReadMultiFromSlaveIRQ(u8SlaveAddr , RegisterAddr, pBuffer, NumByteToRead);
000004  4613              MOV      r3,r2
000006  4622              MOV      r2,r4
000008  bc30              POP      {r4,r5}
00000a  0840              LSRS     r0,r0,#1              ;99
00000c  f7ffbffe          B.W      I2Cx_ReadMultiFromSlaveIRQ
;;;102    	
;;;103    	#endif
;;;104    }
;;;105    
                          ENDP


                          AREA ||i.appLSM6DSL_SetACC||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  appLSM6DSL_SetACC PROC
;;;478    
;;;479    void appLSM6DSL_SetACC(void)
000000  b508              PUSH     {r3,lr}
;;;480    {
;;;481    	uint8_t data;
;;;482    
;;;483    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_WHO_AM_I_ADDR, 1, &data);	// value : 0x6A	
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DSL_Read
;;;484    
;;;485    	printf("WHO_AM_I : 0x%2X\r\n" , data);
00000e  f89d1000          LDRB     r1,[sp,#0]
000012  a008              ADR      r0,|L14.52|
000014  f7fffffe          BL       __2printf
;;;486    	
;;;487    	appLSM6DSL_Set_SW_RESET();
000018  f7fffffe          BL       appLSM6DSL_Set_SW_RESET
;;;488    	appLSM6DSL_Set_IF_Addr_Incr();
00001c  f7fffffe          BL       appLSM6DSL_Set_IF_Addr_Incr
;;;489    	appLSM6DSL_Set_BDU();
000020  f7fffffe          BL       appLSM6DSL_Set_BDU
;;;490    	appLSM6DSL_Set_FIFO_MODE();
000024  f7fffffe          BL       appLSM6DSL_Set_FIFO_MODE
;;;491    	appLSM6DSL_Set_ODR_XL();
000028  f7fffffe          BL       appLSM6DSL_Set_ODR_XL
;;;492    	appLSM6DSL_Set_FS_XL();
00002c  f7fffffe          BL       appLSM6DSL_Set_FS_XL
;;;493    
;;;494    }
000030  bd08              POP      {r3,pc}
;;;495    
                          ENDP

000032  0000              DCW      0x0000
                  |L14.52|
000034  57484f5f          DCB      "WHO_AM_I : 0x%2X\r\n",0
000038  414d5f49
00003c  203a2030
000040  78253258
000044  0d0a00  
000047  00                DCB      0

                          AREA ||i.appLSM6DSL_SetAccCalData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetAccCalData PROC
;;;153    
;;;154    void appLSM6DSL_SetAccCalData(AXIS_TypeDef axis,int16_t data)
000000  4a05              LDR      r2,|L15.24|
;;;155    {
000002  b128              CBZ      r0,|L15.16|
;;;156    	switch(axis)
000004  2801              CMP      r0,#1
000006  d005              BEQ      |L15.20|
000008  2802              CMP      r0,#2
00000a  d100              BNE      |L15.14|
;;;157    	{
;;;158    		case AXIS_X:
;;;159    			cLSM6DSL_ACCx = data; 
;;;160    			break;
;;;161    
;;;162    		case AXIS_Y:
;;;163    			cLSM6DSL_ACCy = data; 
;;;164    			break;
;;;165    
;;;166    		case AXIS_Z:
;;;167    			cLSM6DSL_ACCz = data; 
00000c  80d1              STRH     r1,[r2,#6]
                  |L15.14|
;;;168    			break;				
;;;169    	}
;;;170    }
00000e  4770              BX       lr
                  |L15.16|
000010  8051              STRH     r1,[r2,#2]            ;159
000012  4770              BX       lr
                  |L15.20|
000014  8091              STRH     r1,[r2,#4]            ;163
000016  4770              BX       lr
;;;171    
                          ENDP

                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_SetAccData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetAccData PROC
;;;189    
;;;190    void appLSM6DSL_SetAccData(AXIS_TypeDef axis,int16_t data)
000000  4a05              LDR      r2,|L16.24|
;;;191    {
000002  b128              CBZ      r0,|L16.16|
;;;192    	switch(axis)
000004  2801              CMP      r0,#1
000006  d005              BEQ      |L16.20|
000008  2802              CMP      r0,#2
00000a  d100              BNE      |L16.14|
;;;193    	{
;;;194    		case AXIS_X:
;;;195    			LSM6DSL_ACCx = data; 
;;;196    			break;
;;;197    
;;;198    		case AXIS_Y:
;;;199    			LSM6DSL_ACCy = data; 
;;;200    			break;
;;;201    
;;;202    		case AXIS_Z:
;;;203    			LSM6DSL_ACCz = data; 
00000c  8251              STRH     r1,[r2,#0x12]
                  |L16.14|
;;;204    			break;				
;;;205    	}
;;;206    }
00000e  4770              BX       lr
                  |L16.16|
000010  81d1              STRH     r1,[r2,#0xe]          ;195
000012  4770              BX       lr
                  |L16.20|
000014  8211              STRH     r1,[r2,#0x10]         ;199
000016  4770              BX       lr
;;;207    
                          ENDP

                  |L16.24|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_SetGyro||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  appLSM6DSL_SetGyro PROC
;;;495    
;;;496    void appLSM6DSL_SetGyro(void)
000000  b508              PUSH     {r3,lr}
;;;497    {
;;;498    	uint8_t data;
;;;499    
;;;500    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_WHO_AM_I_ADDR, 1, &data);	// value : 0x6A
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DSL_Read
;;;501    
;;;502    	printf("WHO_AM_I : 0x%2X\r\n" , data);
00000e  f89d1000          LDRB     r1,[sp,#0]
000012  a007              ADR      r0,|L17.48|
000014  f7fffffe          BL       __2printf
;;;503    	
;;;504    	appLSM6DSL_Set_IF_Addr_Incr();
000018  f7fffffe          BL       appLSM6DSL_Set_IF_Addr_Incr
;;;505    	appLSM6DSL_Set_BDU();
00001c  f7fffffe          BL       appLSM6DSL_Set_BDU
;;;506    	appLSM6DSL_Set_FIFO_MODE();
000020  f7fffffe          BL       appLSM6DSL_Set_FIFO_MODE
;;;507    	appLSM6DSL_Set_ODR_G();
000024  f7fffffe          BL       appLSM6DSL_Set_ODR_G
;;;508    	appLSM6DSL_Set_FS_G();	
000028  f7fffffe          BL       appLSM6DSL_Set_FS_G
;;;509    	
;;;510    }
00002c  bd08              POP      {r3,pc}
;;;511    
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
000030  57484f5f          DCB      "WHO_AM_I : 0x%2X\r\n",0
000034  414d5f49
000038  203a2030
00003c  78253258
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.appLSM6DSL_SetGyroCalData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetGyroCalData PROC
;;;171    
;;;172    void appLSM6DSL_SetGyroCalData(AXIS_TypeDef axis,int16_t data)
000000  4a05              LDR      r2,|L18.24|
;;;173    {
000002  b128              CBZ      r0,|L18.16|
;;;174    	switch(axis)
000004  2801              CMP      r0,#1
000006  d005              BEQ      |L18.20|
000008  2802              CMP      r0,#2
00000a  d100              BNE      |L18.14|
;;;175    	{
;;;176    		case AXIS_X:
;;;177    			cLSM6DSL_GYROx = data; 
;;;178    			break;
;;;179    
;;;180    		case AXIS_Y:
;;;181    			cLSM6DSL_GYROy = data; 
;;;182    			break;
;;;183    
;;;184    		case AXIS_Z:
;;;185    			cLSM6DSL_GYROz = data; 
00000c  8191              STRH     r1,[r2,#0xc]
                  |L18.14|
;;;186    			break;				
;;;187    	}
;;;188    }
00000e  4770              BX       lr
                  |L18.16|
000010  8111              STRH     r1,[r2,#8]            ;177
000012  4770              BX       lr
                  |L18.20|
000014  8151              STRH     r1,[r2,#0xa]          ;181
000016  4770              BX       lr
;;;189    
                          ENDP

                  |L18.24|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_SetGyroData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetGyroData PROC
;;;207    
;;;208    void appLSM6DSL_SetGyroData(AXIS_TypeDef axis,int16_t data)
000000  4a05              LDR      r2,|L19.24|
;;;209    {
000002  b128              CBZ      r0,|L19.16|
;;;210    	switch(axis)
000004  2801              CMP      r0,#1
000006  d005              BEQ      |L19.20|
000008  2802              CMP      r0,#2
00000a  d100              BNE      |L19.14|
;;;211    	{
;;;212    		case AXIS_X:
;;;213    			LSM6DSL_GYROx = data; 
;;;214    			break;
;;;215    
;;;216    		case AXIS_Y:
;;;217    			LSM6DSL_GYROy = data; 
;;;218    			break;
;;;219    
;;;220    		case AXIS_Z:
;;;221    			LSM6DSL_GYROz = data; 
00000c  8311              STRH     r1,[r2,#0x18]
                  |L19.14|
;;;222    			break;				
;;;223    	}
;;;224    }
00000e  4770              BX       lr
                  |L19.16|
000010  8291              STRH     r1,[r2,#0x14]         ;213
000012  4770              BX       lr
                  |L19.20|
000014  82d1              STRH     r1,[r2,#0x16]         ;217
000016  4770              BX       lr
;;;225    
                          ENDP

                  |L19.24|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_Set_BDU||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_BDU PROC
;;;400    
;;;401    void appLSM6DSL_Set_BDU(void)
000000  b508              PUSH     {r3,lr}
;;;402    {
;;;403    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;404    	
;;;405    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2112              MOVS     r1,#0x12
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;406    	value &= ~LSM6DSL_ACC_GYRO_BDU_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;407    	value |= LSM6DSL_ACC_GYRO_BDU_BLOCK_UPDATE;
;;;408    
;;;409    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000018  466b              MOV      r3,sp
00001a  f0400040          ORR      r0,r0,#0x40           ;407
00001e  f88d0000          STRB     r0,[sp,#0]            ;407
000022  2201              MOVS     r2,#1
000024  2112              MOVS     r1,#0x12
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;410    }
00002c  bd08              POP      {r3,pc}
;;;411    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_FIFO_MODE||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_FIFO_MODE PROC
;;;411    
;;;412    void appLSM6DSL_Set_FIFO_MODE(void)
000000  b508              PUSH     {r3,lr}
;;;413    {
;;;414    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;415    	
;;;416    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_FIFO_CTRL5, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  210a              MOVS     r1,#0xa
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;417    	value &= ~LSM6DSL_XG_FIFO_MODE_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;418    	value |= LSM6DSL_XG_FIFO_MODE_BYPASS;
;;;419    
;;;420    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_FIFO_CTRL5, 1,&value);
000018  466b              MOV      r3,sp
00001a  f0200007          BIC      r0,r0,#7              ;417
00001e  f88d0000          STRB     r0,[sp,#0]            ;418
000022  2201              MOVS     r2,#1
000024  210a              MOVS     r1,#0xa
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;421    }
00002c  bd08              POP      {r3,pc}
;;;422    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_FS_G||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_FS_G PROC
;;;444    
;;;445    void appLSM6DSL_Set_FS_G(void)
000000  b508              PUSH     {r3,lr}
;;;446    {
;;;447    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;448    	
;;;449    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2111              MOVS     r1,#0x11
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;450    	value &= ~LSM6DSL_G_FS_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;451    	value |= LSM6DSL_G_FS_245;	//LSM6DSL_G_FS_500 , LSM6DSL_G_FS_1000
;;;452    
;;;453    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000018  466b              MOV      r3,sp
00001a  f020000c          BIC      r0,r0,#0xc            ;450
00001e  f88d0000          STRB     r0,[sp,#0]            ;451
000022  2201              MOVS     r2,#1
000024  2111              MOVS     r1,#0x11
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;454    }
00002c  bd08              POP      {r3,pc}
;;;455    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_FS_XL||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_FS_XL PROC
;;;455    
;;;456    void appLSM6DSL_Set_FS_XL(void)
000000  b508              PUSH     {r3,lr}
;;;457    {
;;;458    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;459    	
;;;460    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2110              MOVS     r1,#0x10
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;461    	value &= ~LSM6DSL_XL_FS_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;462    	value |= LSM6DSL_XL_FS_2G;	//LSM6DSL_XL_FS_4G , LSM6DSL_XL_FS_8G
;;;463    
;;;464    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000018  466b              MOV      r3,sp
00001a  f020000c          BIC      r0,r0,#0xc            ;461
00001e  f88d0000          STRB     r0,[sp,#0]            ;462
000022  2201              MOVS     r2,#1
000024  2110              MOVS     r1,#0x10
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;465    }
00002c  bd08              POP      {r3,pc}
;;;466    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_IF_Addr_Incr||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_IF_Addr_Incr PROC
;;;389    
;;;390    void appLSM6DSL_Set_IF_Addr_Incr(void)
000000  b508              PUSH     {r3,lr}
;;;391    {
;;;392    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;393    	
;;;394    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2112              MOVS     r1,#0x12
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;395    	value &= ~LSM6DSL_XG_IF_INC_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;396    	value |= LSM6DSL_XG_IF_INC;
;;;397    
;;;398    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000018  466b              MOV      r3,sp
00001a  f0400004          ORR      r0,r0,#4              ;396
00001e  f88d0000          STRB     r0,[sp,#0]            ;396
000022  2201              MOVS     r2,#1
000024  2112              MOVS     r1,#0x12
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;399    }
00002c  bd08              POP      {r3,pc}
;;;400    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_ODR_G||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_ODR_G PROC
;;;422    
;;;423    void appLSM6DSL_Set_ODR_G(void)
000000  b508              PUSH     {r3,lr}
;;;424    {
;;;425    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;426    	
;;;427    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2111              MOVS     r1,#0x11
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;428    	value &= ~LSM6DSL_G_ODR_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;429    	value |= LSM6DSL_G_ODR_1K66HZ;
;;;430    
;;;431    	appLSM6DSL_Write(GYRO_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000018  466b              MOV      r3,sp
00001a  f02000f0          BIC      r0,r0,#0xf0           ;428
00001e  f0400080          ORR      r0,r0,#0x80           ;429
000022  f88d0000          STRB     r0,[sp,#0]            ;429
000026  2201              MOVS     r2,#1
000028  2111              MOVS     r1,#0x11
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;432    }
000030  bd08              POP      {r3,pc}
;;;433    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_ODR_XL||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_ODR_XL PROC
;;;433    
;;;434    void appLSM6DSL_Set_ODR_XL(void)
000000  b508              PUSH     {r3,lr}
;;;435    {
;;;436    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;437    	
;;;438    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2110              MOVS     r1,#0x10
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;439    	value &= ~LSM6DSL_XL_ODR_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;440    	value |= LSM6DSL_XL_ODR_1K66HZ;
;;;441    
;;;442    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000018  466b              MOV      r3,sp
00001a  f02000f0          BIC      r0,r0,#0xf0           ;439
00001e  f0400080          ORR      r0,r0,#0x80           ;440
000022  f88d0000          STRB     r0,[sp,#0]            ;440
000026  2201              MOVS     r2,#1
000028  2110              MOVS     r1,#0x10
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;443    }
000030  bd08              POP      {r3,pc}
;;;444    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_SW_RESET||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_SW_RESET PROC
;;;466    
;;;467    void appLSM6DSL_Set_SW_RESET(void)
000000  b508              PUSH     {r3,lr}
;;;468    {
;;;469    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;470    	
;;;471    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2112              MOVS     r1,#0x12
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;472    	value &= ~LSM6DSL_ACC_GYRO_SW_RESET_MASK;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;473    	value |= LSM6DSL_ACC_GYRO_SW_RESET_RESET_DEVICE;
;;;474    
;;;475    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000018  466b              MOV      r3,sp
00001a  f0400001          ORR      r0,r0,#1              ;473
00001e  f88d0000          STRB     r0,[sp,#0]            ;473
000022  2201              MOVS     r2,#1
000024  2112              MOVS     r1,#0x12
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;476    }
00002c  bd08              POP      {r3,pc}
;;;477    
                          ENDP


                          AREA ||i.appLSM6DSL_Setup||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Setup PROC
;;;511    
;;;512    void appLSM6DSL_Setup(void)
000000  b510              PUSH     {r4,lr}
;;;513    {
;;;514    	appLSM6DSL_SetACC();	
000002  f7fffffe          BL       appLSM6DSL_SetACC
;;;515    	appLSM6DSL_SetGyro();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      appLSM6DSL_SetGyro
;;;516    
;;;517    }	
;;;518    
                          ENDP


                          AREA ||i.appLSM6DSL_Write||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Write PROC
;;;105    
;;;106    void appLSM6DSL_Write(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b430              PUSH     {r4,r5}
;;;107                                   uint16_t NumByteToWrite,
;;;108                                   uint8_t* pBuffer)
;;;109    {
000002  461c              MOV      r4,r3
;;;110    	#if defined (ENABLE_I2C_POLLING_DISCRETE)
;;;111    	uint8_t i;
;;;112    	uint32_t tmp;
;;;113    	
;;;114    	I2C_T *i2c = I2C_SENSOR_PORT;	
;;;115    	I2C_START(i2c);                    			//Start
;;;116    	I2C_WAIT_READY(i2c);
;;;117    
;;;118    	I2C_SET_DATA(i2c, DeviceAddr | I2C_WR );        			//send slave address
;;;119    	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;120    	I2C_WAIT_READY(i2c);
;;;121    
;;;122    	I2C_SET_DATA(i2c, RegisterAddr);        			//send index
;;;123    	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;124    	I2C_WAIT_READY(i2c);
;;;125    
;;;126    	for (i=0; i<NumByteToWrite; i++)
;;;127    	{
;;;128    		tmp = pBuffer[i];
;;;129    		I2C_SET_DATA(i2c, tmp);            		//send Data
;;;130    		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;131    		I2C_WAIT_READY(i2c);
;;;132    	}
;;;133    
;;;134    	I2C_STOP(i2c);								//Stop
;;;135    
;;;136    	#elif defined (ENABLE_I2C_POLLING_API)
;;;137    
;;;138    	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;139    	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;140    
;;;141    	I2C_WriteMultiBytesOneReg(I2C_SENSOR_PORT, u8SlaveAddr, RegisterAddr, pBuffer, NumByteToWrite);
;;;142    //	I2C_WriteByteOneReg(I2C_SENSOR_PORT, u8SlaveAddr , RegisterAddr, *pBuffer);	
;;;143    
;;;144    	#elif defined (ENABLE_I2C_IRQ)
;;;145    
;;;146    	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;147    	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;148    	
;;;149    	I2Cx_WriteMultiToSlaveIRQ(u8SlaveAddr , RegisterAddr, pBuffer, NumByteToWrite);
000004  4613              MOV      r3,r2
000006  4622              MOV      r2,r4
000008  bc30              POP      {r4,r5}
00000a  0840              LSRS     r0,r0,#1              ;147
00000c  f7ffbffe          B.W      I2Cx_WriteMultiToSlaveIRQ
;;;150    
;;;151    	#endif
;;;152    }
;;;153    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ax_buf
                          %        32
                  ay_buf
                          %        32
                  az_buf
                          %        32
                  gx_buf
                          %        32
                  gy_buf
                          %        32
                  gz_buf
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  FlagSwitch
000000  00                DCB      0x00
                  Flag_Calibrate
000001  00                DCB      0x00
                  cLSM6DSL_ACCx
000002  0000              DCW      0x0000
                  cLSM6DSL_ACCy
000004  0000              DCW      0x0000
                  cLSM6DSL_ACCz
000006  0000              DCW      0x0000
                  cLSM6DSL_GYROx
000008  0000              DCW      0x0000
                  cLSM6DSL_GYROy
00000a  0000              DCW      0x0000
                  cLSM6DSL_GYROz
00000c  0000              DCW      0x0000
                  LSM6DSL_ACCx
00000e  0000              DCB      0x00,0x00
                  LSM6DSL_ACCy
000010  0000              DCB      0x00,0x00
                  LSM6DSL_ACCz
000012  0000              DCB      0x00,0x00
                  LSM6DSL_GYROx
000014  0000              DCB      0x00,0x00
                  LSM6DSL_GYROy
000016  0000              DCB      0x00,0x00
                  LSM6DSL_GYROz
000018  0000              DCB      0x00,0x00
                  ||gx||
00001a  0000              DCB      0x00,0x00
                  ||gy||
00001c  0000              DCB      0x00,0x00
                  ||gz||
00001e  0000              DCB      0x00,0x00
                  ||ax||
000020  0000              DCB      0x00,0x00
                  ||ay||
000022  0000              DCB      0x00,0x00
                  ||az||
000024  00000000          DCB      0x00,0x00,0x00,0x00
                  RollAng
000028  00000000          DCFS     0x00000000 ; 0
                  PitchAng
00002c  00000000          DCFS     0x00000000 ; 0
                  angle_dot
                          DCD      0x00000000
                  f_angle
                          DCD      0x00000000
                  f_angle_dot
                          DCD      0x00000000

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  angle
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\I2C_LSM6DSL.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DSL_c_41ae50e2____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_I2C_LSM6DSL_c_41ae50e2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DSL_c_41ae50e2____REVSH|
#line 402
|__asm___13_I2C_LSM6DSL_c_41ae50e2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DSL_c_41ae50e2____RRX|
#line 587
|__asm___13_I2C_LSM6DSL_c_41ae50e2____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
