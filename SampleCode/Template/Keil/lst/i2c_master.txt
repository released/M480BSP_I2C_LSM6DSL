; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_master.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_master.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Kalman_Filter -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\i2c_master.crf ..\i2c_master.c]
                          THUMB

                          AREA ||i.I2C0_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;29     
;;;30     void I2Cx_Master_IRQHandler(void)
000000  4907              LDR      r1,|L1.32|
;;;31     {
;;;32         uint32_t u32Status;
;;;33     
;;;34         u32Status = I2C_GET_STATUS(MASTER_I2C);
000002  68c8              LDR      r0,[r1,#0xc]
;;;35     
;;;36         if (I2C_GET_TIMEOUT_FLAG(MASTER_I2C))
000004  694a              LDR      r2,[r1,#0x14]
000006  43d2              MVNS     r2,r2
000008  07d2              LSLS     r2,r2,#31
00000a  d005              BEQ      |L1.24|
;;;37         {
;;;38             /* Clear I2C Timeout Flag */
;;;39             I2C_ClearTimeoutFlag(MASTER_I2C);                   
;;;40         }    
;;;41         else
;;;42         {
;;;43             if (I2Cx_Master_HandlerFn != NULL)
00000c  4905              LDR      r1,|L1.36|
00000e  688a              LDR      r2,[r1,#8]  ; I2Cx_Master_HandlerFn
000010  2a00              CMP      r2,#0
000012  d004              BEQ      |L1.30|
;;;44                 I2Cx_Master_HandlerFn(u32Status);
000014  6889              LDR      r1,[r1,#8]  ; I2Cx_Master_HandlerFn
000016  4708              BX       r1
                  |L1.24|
000018  4608              MOV      r0,r1                 ;39
00001a  f7ffbffe          B.W      I2C_ClearTimeoutFlag
                  |L1.30|
;;;45         }
;;;46     }
00001e  4770              BX       lr
;;;47     
                          ENDP

                  |L1.32|
                          DCD      0x40080000
                  |L1.36|
                          DCD      ||.data||

                          AREA ||i.I2Cx_MasterRx_multi||, CODE, READONLY, ALIGN=2

                  I2Cx_MasterRx_multi PROC
;;;47     
;;;48     void I2Cx_MasterRx_multi(uint32_t u32Status)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
;;;50         if(u32Status == MASTER_START_TRANSMIT) //0x08                       	/* START has been transmitted and prepare SLA+W */
;;;51         {
;;;52             I2C_SET_DATA(MASTER_I2C, ((g_u8DeviceAddr_m << 1) | I2C_WR));    				/* Write SLA+W to Register I2CDAT */
000002  4d2e              LDR      r5,|L2.188|
000004  4c2e              LDR      r4,|L2.192|
000006  2808              CMP      r0,#8                 ;50
000008  d018              BEQ      |L2.60|
;;;53             I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;54     
;;;55     		I2Cx_Master_LOG(u32Status);
;;;56         }
;;;57         else if(u32Status == MASTER_TRANSMIT_ADDRESS_ACK) //0x18        			/* SLA+W has been transmitted and ACK has been received */
00000a  2818              CMP      r0,#0x18
00000c  d019              BEQ      |L2.66|
;;;58         {
;;;59             I2C_SET_DATA(MASTER_I2C, g_au8Reg);
;;;60             I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;61     		
;;;62     		I2Cx_Master_LOG(u32Status);
;;;63         }
;;;64         else if(u32Status == MASTER_TRANSMIT_ADDRESS_NACK) //0x20            	/* SLA+W has been transmitted and NACK has been received */
00000e  2820              CMP      r0,#0x20
000010  d01c              BEQ      |L2.76|
;;;65         {
;;;66             I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_STA | I2C_CTL_STO);
;;;67     
;;;68     //        I2C_STOP(MASTER_I2C);
;;;69     //        I2C_START(MASTER_I2C);
;;;70     		
;;;71     		I2Cx_Master_LOG(u32Status);
;;;72         }
;;;73         else if(u32Status == MASTER_TRANSMIT_DATA_ACK) //0x28                  	/* DATA has been transmitted and ACK has been received */
;;;74         {
;;;75             if (rawlenth > 0)
;;;76     			I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_STA);				//repeat start
;;;77     		else
;;;78     		{
;;;79     			I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_STO);
;;;80     			g_u8EndFlag = 1;
000012  2601              MOVS     r6,#1
000014  2828              CMP      r0,#0x28              ;73
000016  d01f              BEQ      |L2.88|
;;;81     		}
;;;82     		
;;;83     		I2Cx_Master_LOG(u32Status);
;;;84         }
;;;85         else if(u32Status == MASTER_REPEAT_START) //0x10                  		/* Repeat START has been transmitted and prepare SLA+R */
000018  2810              CMP      r0,#0x10
00001a  d02d              BEQ      |L2.120|
;;;86         {
;;;87             I2C_SET_DATA(MASTER_I2C, ((g_u8DeviceAddr_m << 1) | I2C_RD));   		/* Write SLA+R to Register I2CDAT */
;;;88             I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;89     		
;;;90     		I2Cx_Master_LOG(u32Status);
;;;91         }
;;;92         else if(u32Status == MASTER_RECEIVE_ADDRESS_ACK) //0x40                	/* SLA+R has been transmitted and ACK has been received */
00001c  2840              CMP      r0,#0x40
00001e  d02f              BEQ      |L2.128|
;;;93         {
;;;94     		if (rawlenth > 1)
;;;95     			I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_AA);
;;;96     		else
;;;97     			I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;98     
;;;99     		I2Cx_Master_LOG(u32Status);
;;;100        }
;;;101    	else if(u32Status == MASTER_RECEIVE_DATA_ACK) //0x50                 	/* DATA has been received and ACK has been returned */
000020  2850              CMP      r0,#0x50
000022  d031              BEQ      |L2.136|
;;;102        {
;;;103            g_au8Buffer[g_u8DataLen_m++] = (unsigned char) I2C_GetData(MASTER_I2C);
;;;104            if (g_u8DataLen_m < (rawlenth-1))
;;;105    		{
;;;106    			I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_AA);
;;;107    		}
;;;108    		else
;;;109    		{
;;;110    			I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;111    		}
;;;112    		
;;;113    		I2Cx_Master_LOG(u32Status);
;;;114        }
;;;115        else if(u32Status == MASTER_RECEIVE_DATA_NACK) //0x58                  	/* DATA has been received and NACK has been returned */
000024  2858              CMP      r0,#0x58
000026  d110              BNE      |L2.74|
;;;116        {
;;;117            g_au8Buffer[g_u8DataLen_m++] = (unsigned char) I2C_GetData(MASTER_I2C);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       I2C_GetData
00002e  78a9              LDRB     r1,[r5,#2]  ; g_u8DataLen_m
000030  68ea              LDR      r2,[r5,#0xc]  ; g_au8Buffer
000032  440a              ADD      r2,r2,r1
000034  1c49              ADDS     r1,r1,#1
000036  70a9              STRB     r1,[r5,#2]
000038  7010              STRB     r0,[r2,#0]
;;;118            I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_STO);
;;;119            g_u8EndFlag = 1;
;;;120    
;;;121    		
;;;122    		I2Cx_Master_LOG(u32Status);
00003a  e015              B        |L2.104|
                  |L2.60|
00003c  7868              LDRB     r0,[r5,#1]            ;52  ; g_u8DeviceAddr_m
00003e  0040              LSLS     r0,r0,#1              ;52
000040  e000              B        |L2.68|
                  |L2.66|
000042  7928              LDRB     r0,[r5,#4]            ;59  ; g_au8Reg
                  |L2.68|
000044  60a0              STR      r0,[r4,#8]            ;52
000046  e033              B        |L2.176|
                  |L2.72|
000048  6020              STR      r0,[r4,#0]            ;53
                  |L2.74|
;;;123        }
;;;124        else
;;;125        {
;;;126    		#if defined (DEBUG_LOG_MASTER_LV1)
;;;127            /* TO DO */
;;;128            printf("I2Cx_MasterRx_multi Status 0x%x is NOT processed\n", u32Status);
;;;129    		#endif
;;;130        }
;;;131    }
00004a  bd70              POP      {r4-r6,pc}
                  |L2.76|
00004c  6820              LDR      r0,[r4,#0]            ;66
00004e  f020003c          BIC      r0,r0,#0x3c           ;66
000052  f0400038          ORR      r0,r0,#0x38           ;66
000056  e7f7              B        |L2.72|
                  |L2.88|
000058  78e8              LDRB     r0,[r5,#3]            ;75  ; rawlenth
00005a  b128              CBZ      r0,|L2.104|
00005c  6820              LDR      r0,[r4,#0]            ;76
00005e  f020003c          BIC      r0,r0,#0x3c           ;76
000062  f0400028          ORR      r0,r0,#0x28           ;76
000066  e7ef              B        |L2.72|
                  |L2.104|
000068  6820              LDR      r0,[r4,#0]            ;79
00006a  f020003c          BIC      r0,r0,#0x3c           ;79
00006e  f0400018          ORR      r0,r0,#0x18           ;79
000072  6020              STR      r0,[r4,#0]            ;79
000074  702e              STRB     r6,[r5,#0]            ;80
000076  bd70              POP      {r4-r6,pc}
                  |L2.120|
000078  7868              LDRB     r0,[r5,#1]            ;87  ; g_u8DeviceAddr_m
00007a  eb060040          ADD      r0,r6,r0,LSL #1       ;87
00007e  e7e1              B        |L2.68|
                  |L2.128|
000080  78e8              LDRB     r0,[r5,#3]            ;94  ; rawlenth
000082  2801              CMP      r0,#1                 ;94
000084  d80e              BHI      |L2.164|
000086  e013              B        |L2.176|
                  |L2.136|
000088  4620              MOV      r0,r4                 ;103
00008a  f7fffffe          BL       I2C_GetData
00008e  78a9              LDRB     r1,[r5,#2]            ;103  ; g_u8DataLen_m
000090  68ea              LDR      r2,[r5,#0xc]          ;103  ; g_au8Buffer
000092  440a              ADD      r2,r2,r1              ;103
000094  1c49              ADDS     r1,r1,#1              ;103
000096  70a9              STRB     r1,[r5,#2]            ;103
000098  7010              STRB     r0,[r2,#0]            ;103
00009a  78a9              LDRB     r1,[r5,#2]            ;104  ; g_u8DataLen_m
00009c  78e8              LDRB     r0,[r5,#3]            ;104  ; rawlenth
00009e  1e40              SUBS     r0,r0,#1              ;104
0000a0  4281              CMP      r1,r0                 ;104
0000a2  da05              BGE      |L2.176|
                  |L2.164|
0000a4  6820              LDR      r0,[r4,#0]            ;106
0000a6  f020003c          BIC      r0,r0,#0x3c           ;106
0000aa  f040000c          ORR      r0,r0,#0xc            ;106
0000ae  e7cb              B        |L2.72|
                  |L2.176|
0000b0  6820              LDR      r0,[r4,#0]            ;110
0000b2  f020003c          BIC      r0,r0,#0x3c           ;110
0000b6  f0400008          ORR      r0,r0,#8              ;110
0000ba  e7c5              B        |L2.72|
;;;132    
                          ENDP

                  |L2.188|
                          DCD      ||.data||
                  |L2.192|
                          DCD      0x40080000

                          AREA ||i.I2Cx_MasterTx_multi||, CODE, READONLY, ALIGN=2

                  I2Cx_MasterTx_multi PROC
;;;132    
;;;133    void I2Cx_MasterTx_multi(uint32_t u32Status)
000000  4922              LDR      r1,|L3.140|
;;;134    {
;;;135        if(u32Status == MASTER_START_TRANSMIT)  //0x08                     	/* START has been transmitted */
;;;136        {
;;;137            I2C_SET_DATA(MASTER_I2C, ((g_u8DeviceAddr_m << 1) | I2C_WR));    			/* Write SLA+W to Register I2CDAT */
000002  4a23              LDR      r2,|L3.144|
000004  2808              CMP      r0,#8                 ;135
000006  d015              BEQ      |L3.52|
;;;138            I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;139    
;;;140    		I2Cx_Master_LOG(u32Status);
;;;141    		
;;;142        }
;;;143        else if(u32Status == MASTER_TRANSMIT_ADDRESS_ACK)  //0x18           	/* SLA+W has been transmitted and ACK has been received */
000008  2818              CMP      r0,#0x18
00000a  d016              BEQ      |L3.58|
;;;144        {
;;;145            I2C_SET_DATA(MASTER_I2C, g_au8Reg);
;;;146            I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;147    		
;;;148    		I2Cx_Master_LOG(u32Status);	
;;;149        }
;;;150        else if(u32Status == MASTER_TRANSMIT_ADDRESS_NACK) //0x20           /* SLA+W has been transmitted and NACK has been received */
00000c  2820              CMP      r0,#0x20
00000e  d01d              BEQ      |L3.76|
;;;151        {
;;;152            I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_STA | I2C_CTL_STO);
;;;153    
;;;154    //        I2C_STOP(MASTER_I2C);
;;;155    //        I2C_START(MASTER_I2C);
;;;156    
;;;157    		I2Cx_Master_LOG(u32Status);	
;;;158        }
;;;159        else if(u32Status == MASTER_TRANSMIT_DATA_ACK) //0x28              	/* DATA has been transmitted and ACK has been received */
000010  2828              CMP      r0,#0x28
000012  d021              BEQ      |L3.88|
;;;160        {
;;;161            if(g_u8DataLen_m < rawlenth)
;;;162            {
;;;163                I2C_SET_DATA(MASTER_I2C, g_au8Buffer[g_u8DataLen_m++]);
;;;164                I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI);
;;;165            }
;;;166            else
;;;167            {
;;;168                I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI | I2C_CTL_STO);
;;;169                g_u8EndFlag = 1;
;;;170            }
;;;171    
;;;172    		I2Cx_Master_LOG(u32Status);		
;;;173        }
;;;174        else if(u32Status == MASTER_ARBITRATION_LOST) //0x38
000014  2838              CMP      r0,#0x38
000016  d033              BEQ      |L3.128|
;;;175        {
;;;176    		I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_STA_SI_AA);
;;;177    
;;;178    		I2Cx_Master_LOG(u32Status);		
;;;179        }
;;;180        else if(u32Status == BUS_ERROR) //0x00
000018  2800              CMP      r0,#0
00001a  d116              BNE      |L3.74|
;;;181        {
;;;182    		I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_STO_SI_AA);
00001c  6808              LDR      r0,[r1,#0]
00001e  f020003c          BIC      r0,r0,#0x3c
000022  f040001c          ORR      r0,r0,#0x1c
000026  6008              STR      r0,[r1,#0]
;;;183    		I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_SI_AA);
000028  6808              LDR      r0,[r1,#0]
00002a  f020003c          BIC      r0,r0,#0x3c
00002e  f040000c          ORR      r0,r0,#0xc
;;;184    		
;;;185    		I2Cx_Master_LOG(u32Status);		
000032  e009              B        |L3.72|
                  |L3.52|
000034  7850              LDRB     r0,[r2,#1]            ;137  ; g_u8DeviceAddr_m
000036  0040              LSLS     r0,r0,#1              ;137
000038  e000              B        |L3.60|
                  |L3.58|
00003a  7910              LDRB     r0,[r2,#4]            ;145  ; g_au8Reg
                  |L3.60|
00003c  6088              STR      r0,[r1,#8]            ;137
00003e  6808              LDR      r0,[r1,#0]            ;138
000040  f020003c          BIC      r0,r0,#0x3c           ;138
000044  f0400008          ORR      r0,r0,#8              ;138
                  |L3.72|
000048  6008              STR      r0,[r1,#0]            ;138
                  |L3.74|
;;;186        }		
;;;187        else
;;;188        {
;;;189    		#if defined (DEBUG_LOG_MASTER_LV1)
;;;190            /* TO DO */
;;;191            printf("I2Cx_MasterTx_multi Status 0x%x is NOT processed\n", u32Status);
;;;192    		#endif
;;;193        }
;;;194    }
00004a  4770              BX       lr
                  |L3.76|
00004c  6808              LDR      r0,[r1,#0]            ;152
00004e  f020003c          BIC      r0,r0,#0x3c           ;152
000052  f0400038          ORR      r0,r0,#0x38           ;152
000056  e7f7              B        |L3.72|
                  |L3.88|
000058  7890              LDRB     r0,[r2,#2]            ;161  ; g_u8DataLen_m
00005a  78d3              LDRB     r3,[r2,#3]            ;161  ; rawlenth
00005c  4298              CMP      r0,r3                 ;161
00005e  d206              BCS      |L3.110|
000060  7890              LDRB     r0,[r2,#2]            ;163  ; g_u8DataLen_m
000062  68d3              LDR      r3,[r2,#0xc]          ;163  ; g_au8Buffer
000064  4403              ADD      r3,r3,r0              ;163
000066  1c40              ADDS     r0,r0,#1              ;163
000068  7090              STRB     r0,[r2,#2]            ;163
00006a  7818              LDRB     r0,[r3,#0]            ;163
00006c  e7e6              B        |L3.60|
                  |L3.110|
00006e  6808              LDR      r0,[r1,#0]            ;168
000070  f020003c          BIC      r0,r0,#0x3c           ;168
000074  f0400018          ORR      r0,r0,#0x18           ;168
000078  6008              STR      r0,[r1,#0]            ;168
00007a  2001              MOVS     r0,#1                 ;169
00007c  7010              STRB     r0,[r2,#0]            ;169
00007e  4770              BX       lr
                  |L3.128|
000080  6808              LDR      r0,[r1,#0]            ;176
000082  f020003c          BIC      r0,r0,#0x3c           ;176
000086  f040002c          ORR      r0,r0,#0x2c           ;176
00008a  e7dd              B        |L3.72|
;;;195    
                          ENDP

                  |L3.140|
                          DCD      0x40080000
                  |L3.144|
                          DCD      ||.data||

                          AREA ||i.I2Cx_Master_LOG||, CODE, READONLY, ALIGN=1

                  I2Cx_Master_LOG PROC
;;;22     
;;;23     void I2Cx_Master_LOG(uint32_t u32Status)
000000  4770              BX       lr
;;;24     {
;;;25     	#if defined (DEBUG_LOG_MASTER_LV1)
;;;26         printf("%s  : 0x%2x \r\n", __FUNCTION__ , u32Status);
;;;27     	#endif
;;;28     }
;;;29     
                          ENDP


                          AREA ||i.I2Cx_ReadMultiFromSlaveIRQ||, CODE, READONLY, ALIGN=2

                  I2Cx_ReadMultiFromSlaveIRQ PROC
;;;218    
;;;219    void I2Cx_ReadMultiFromSlaveIRQ(uint8_t address,uint8_t reg,uint8_t *data,uint16_t len)
000000  b510              PUSH     {r4,lr}
;;;220    { 
;;;221    	g_u8DeviceAddr_m = address;
000002  4c0a              LDR      r4,|L5.44|
000004  7060              STRB     r0,[r4,#1]
;;;222    	rawlenth = len;
000006  70e3              STRB     r3,[r4,#3]
;;;223    	g_au8Reg = reg ;
000008  7121              STRB     r1,[r4,#4]
;;;224    	g_au8Buffer = data;
;;;225    
;;;226    	g_u8EndFlag = 0;
00000a  2000              MOVS     r0,#0
00000c  60e2              STR      r2,[r4,#0xc]  ; g_au8Buffer
00000e  7020              STRB     r0,[r4,#0]
;;;227    	g_u8DataLen_m = 0;
000010  70a0              STRB     r0,[r4,#2]
;;;228    
;;;229    	/* I2C function to read data from slave */
;;;230    	I2Cx_Master_HandlerFn = (I2C_FUNC)I2Cx_MasterRx_multi;
000012  4807              LDR      r0,|L5.48|
000014  60a0              STR      r0,[r4,#8]  ; I2Cx_Master_HandlerFn
;;;231    
;;;232    //	printf("I2Cx_MasterRx_multi finish\r\n");
;;;233    	
;;;234    	I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_STA);
000016  4807              LDR      r0,|L5.52|
000018  6801              LDR      r1,[r0,#0]
00001a  f021013c          BIC      r1,r1,#0x3c
00001e  f0410120          ORR      r1,r1,#0x20
000022  6001              STR      r1,[r0,#0]
                  |L5.36|
;;;235    
;;;236    	/* Wait I2C Rx Finish */
;;;237    	while(g_u8EndFlag == 0);
000024  7820              LDRB     r0,[r4,#0]  ; g_u8EndFlag
000026  2800              CMP      r0,#0
000028  d0fc              BEQ      |L5.36|
;;;238    	
;;;239    }
00002a  bd10              POP      {r4,pc}
;;;240    
                          ENDP

                  |L5.44|
                          DCD      ||.data||
                  |L5.48|
                          DCD      I2Cx_MasterRx_multi
                  |L5.52|
                          DCD      0x40080000

                          AREA ||i.I2Cx_ReadSingleToSlaveIRQ||, CODE, READONLY, ALIGN=2

                  I2Cx_ReadSingleToSlaveIRQ PROC
;;;267    /*---------------------------------------------------------------------------------------------------------*/
;;;268    void I2Cx_ReadSingleToSlaveIRQ(uint8_t address, uint8_t reg,uint8_t *data)
000000  4b0a              LDR      r3,|L6.44|
;;;269    {
;;;270    	g_u8DeviceAddr_m = address;
000002  7058              STRB     r0,[r3,#1]
;;;271    	rawlenth = 1;
000004  2001              MOVS     r0,#1
000006  70d8              STRB     r0,[r3,#3]
;;;272    	g_au8Reg = reg ;
000008  7119              STRB     r1,[r3,#4]
;;;273    	g_au8Buffer = data;
;;;274    
;;;275    	g_u8DataLen_m = 0;
00000a  2000              MOVS     r0,#0
00000c  60da              STR      r2,[r3,#0xc]  ; g_au8Buffer
00000e  7098              STRB     r0,[r3,#2]
;;;276    	g_u8EndFlag = 0;
000010  7018              STRB     r0,[r3,#0]
;;;277    	
;;;278    	/* I2C function to write data to slave */
;;;279    	I2Cx_Master_HandlerFn = (I2C_FUNC)I2Cx_MasterRx_multi;
000012  4807              LDR      r0,|L6.48|
000014  6098              STR      r0,[r3,#8]  ; I2Cx_Master_HandlerFn
;;;280    	
;;;281    	/* I2C as master sends START signal */
;;;282    	I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_STA);
000016  4807              LDR      r0,|L6.52|
000018  6801              LDR      r1,[r0,#0]
00001a  f021013c          BIC      r1,r1,#0x3c
00001e  f0410120          ORR      r1,r1,#0x20
000022  6001              STR      r1,[r0,#0]
                  |L6.36|
;;;283    
;;;284    	/* Wait I2C Tx Finish */
;;;285    	while (g_u8EndFlag == 0);	
000024  7818              LDRB     r0,[r3,#0]  ; g_u8EndFlag
000026  2800              CMP      r0,#0
000028  d0fc              BEQ      |L6.36|
;;;286    }
00002a  4770              BX       lr
;;;287    
                          ENDP

                  |L6.44|
                          DCD      ||.data||
                  |L6.48|
                          DCD      I2Cx_MasterRx_multi
                  |L6.52|
                          DCD      0x40080000

                          AREA ||i.I2Cx_WriteMultiToSlaveIRQ||, CODE, READONLY, ALIGN=2

                  I2Cx_WriteMultiToSlaveIRQ PROC
;;;195    
;;;196    void I2Cx_WriteMultiToSlaveIRQ(uint8_t address,uint8_t reg,uint8_t *data,uint16_t len)
000000  b510              PUSH     {r4,lr}
;;;197    {		
;;;198    	g_u8DeviceAddr_m = address;
000002  4c0b              LDR      r4,|L7.48|
000004  7060              STRB     r0,[r4,#1]
;;;199    	rawlenth = len;
000006  70e3              STRB     r3,[r4,#3]
;;;200    	g_au8Reg = reg;
000008  7121              STRB     r1,[r4,#4]
;;;201    	g_au8Buffer = data;
;;;202    
;;;203    	g_u8DataLen_m = 0;
00000a  2100              MOVS     r1,#0
00000c  60e2              STR      r2,[r4,#0xc]  ; g_au8Buffer
00000e  70a1              STRB     r1,[r4,#2]
;;;204    	g_u8EndFlag = 0;
000010  7021              STRB     r1,[r4,#0]
;;;205    
;;;206    	/* I2C function to write data to slave */
;;;207    	I2Cx_Master_HandlerFn = (I2C_FUNC)I2Cx_MasterTx_multi;
000012  4808              LDR      r0,|L7.52|
000014  60a0              STR      r0,[r4,#8]  ; I2Cx_Master_HandlerFn
;;;208    
;;;209    //	printf("I2Cx_MasterTx_multi finish\r\n");
;;;210    
;;;211    	/* I2C as master sends START signal */
;;;212    	I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_STA);
000016  4808              LDR      r0,|L7.56|
000018  6802              LDR      r2,[r0,#0]
00001a  f022023c          BIC      r2,r2,#0x3c
00001e  f0420220          ORR      r2,r2,#0x20
000022  6002              STR      r2,[r0,#0]
                  |L7.36|
;;;213    
;;;214    	/* Wait I2C Tx Finish */
;;;215    	while(g_u8EndFlag == 0);
000024  7820              LDRB     r0,[r4,#0]  ; g_u8EndFlag
000026  2800              CMP      r0,#0
000028  d0fc              BEQ      |L7.36|
;;;216    	g_u8EndFlag = 0;
00002a  7021              STRB     r1,[r4,#0]
;;;217    }
00002c  bd10              POP      {r4,pc}
;;;218    
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      ||.data||
                  |L7.52|
                          DCD      I2Cx_MasterTx_multi
                  |L7.56|
                          DCD      0x40080000

                          AREA ||i.I2Cx_WriteSingleToSlaveIRQ||, CODE, READONLY, ALIGN=2

                  I2Cx_WriteSingleToSlaveIRQ PROC
;;;244    /*---------------------------------------------------------------------------------------------------------*/
;;;245    void I2Cx_WriteSingleToSlaveIRQ(uint8_t address,uint8_t reg, uint8_t *data)
000000  4b0a              LDR      r3,|L8.44|
;;;246    {
;;;247    	g_u8DeviceAddr_m = address;
000002  7058              STRB     r0,[r3,#1]
;;;248    	rawlenth = 1;
000004  2001              MOVS     r0,#1
000006  70d8              STRB     r0,[r3,#3]
;;;249    	g_au8Reg = reg;
000008  7119              STRB     r1,[r3,#4]
;;;250    	g_au8Buffer = data;
;;;251    
;;;252    	g_u8DataLen_m = 0;
00000a  2000              MOVS     r0,#0
00000c  60da              STR      r2,[r3,#0xc]  ; g_au8Buffer
00000e  7098              STRB     r0,[r3,#2]
;;;253    	g_u8EndFlag = 0;
000010  7018              STRB     r0,[r3,#0]
;;;254    	
;;;255    	/* I2C function to write data to slave */
;;;256    	I2Cx_Master_HandlerFn = (I2C_FUNC)I2Cx_MasterTx_multi;
000012  4807              LDR      r0,|L8.48|
000014  6098              STR      r0,[r3,#8]  ; I2Cx_Master_HandlerFn
;;;257    	
;;;258    	/* I2C as master sends START signal */
;;;259    	I2C_SET_CONTROL_REG(MASTER_I2C, I2C_CTL_STA);
000016  4807              LDR      r0,|L8.52|
000018  6801              LDR      r1,[r0,#0]
00001a  f021013c          BIC      r1,r1,#0x3c
00001e  f0410120          ORR      r1,r1,#0x20
000022  6001              STR      r1,[r0,#0]
                  |L8.36|
;;;260    
;;;261    	/* Wait I2C Tx Finish */
;;;262    	while (g_u8EndFlag == 0);	
000024  7818              LDRB     r0,[r3,#0]  ; g_u8EndFlag
000026  2800              CMP      r0,#0
000028  d0fc              BEQ      |L8.36|
;;;263    }
00002a  4770              BX       lr
;;;264    
                          ENDP

                  |L8.44|
                          DCD      ||.data||
                  |L8.48|
                          DCD      I2Cx_MasterTx_multi
                  |L8.52|
                          DCD      0x40080000

                          AREA ||.data||, DATA, ALIGN=2

                  g_u8EndFlag
000000  00                DCB      0x00
                  g_u8DeviceAddr_m
000001  00                DCB      0x00
                  g_u8DataLen_m
000002  00                DCB      0x00
                  rawlenth
000003  00                DCB      0x00
                  g_au8Reg
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  I2Cx_Master_HandlerFn
                          DCD      0x00000000
                  g_au8Buffer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\i2c_master.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_i2c_master_c_ae965f01____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_i2c_master_c_ae965f01____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_i2c_master_c_ae965f01____REVSH|
#line 402
|__asm___12_i2c_master_c_ae965f01____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_i2c_master_c_ae965f01____RRX|
#line 587
|__asm___12_i2c_master_c_ae965f01____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
